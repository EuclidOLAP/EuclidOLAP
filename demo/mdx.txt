select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef], [Region].[Europe].[United Kingdom], [Payment Methods].[PayPal], [Customer Types].[New customers], [Sales Channels].[Direct sales])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef], [Region].[Europe].[United Kingdom], [Payment Methods].[PayPal], [Customer Types].[New customers], [Sales Channels].[Direct sales])

---

select
[Measures].Sales on columns,
[Date].[2019].[Q3].[M8].[26] on rows
from [Sahara Online Store]
where (
    [Goods].[Foodstuff].[Fruits].[Lemon],
    [Region].[Europe].[Liechtenstein],
    [Payment Methods].[PayPal],
    [Customer Types].[New customers],
    [Sales Channels].[Dropshipping]
);

---

select
[Measures].Sales on columns,
[Date].[2019].[Q3].[M8].[26] on rows
from [Sahara Online Store];

---

select
[Measures].Sales on columns,
[Date].[2019].[Q3].[M8] on rows
from [Sahara Online Store];

---

select
[Measures].Sales on columns,
[Date].[2019].[Q3] on rows
from [Sahara Online Store];

---

select
[Measures].Sales on columns,
[Date].[2019] on rows
from [Sahara Online Store];

---

select
[Measures].Sales on columns,
[Date].[ALL] on rows
from [Sahara Online Store];

---

select
[Measures].MeaA on columns,
[R1].[o1].[o11] on rows
from [OC1M];

---

select
[Measures].Sales on columns,
[Date].[2019].[Q3].[M8] on rows
from [Sahara Online Store];

---

select
[Measures].members on columns,
r.members on rows
from OC
where (rr.o1.o11.o111, rrr.o1.o11.o111, rrrr.o1.o11.o111, rrrrr.o1.o11.o111);

---

select
[Measures].members on columns,
R1.members on rows
from OC1M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111, R6.o1.o11.o111);

---

select
[Measures].MeaA on columns,
R1.o1.o11.o111 on rows
from OC1M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111, R6.o1.o11.o111);

---

select
[Measures].MeaA on columns,
{R1.[ALL], R1.o1, R1.o2} on rows
from OC1M
where (R2.o1, R3.o1, R4.o1, R5.o1, R6.o1)

---

select
[Measures].MeaA on columns,
{R1.[ALL], R1.o1, R1.o2} on rows
from OC1M

---

select
[Measures].MeaA on columns,
R1.o2 on rows
from OC1M
where (R3.o1, R5.o1, R6.o1)

---

select
[Measures].members on columns,
[Date].root on rows
from [Sahara Online Store]

---

select
[Measures].MeaA on columns,
dr1.root on rows
from tinycube1
where (dr2.t1);

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef], [Region].[Europe].[United Kingdom], [Payment Methods].[PayPal], [Customer Types].[New customers], [Sales Channels].[Direct sales])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Region].[Europe].[United Kingdom], [Payment Methods].[PayPal], [Customer Types].[New customers], [Sales Channels].[Direct sales])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]

---

select
[Measures].members on columns,
Date.[ALL] on rows
from [Sahara Online Store]

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef], [Region].[Europe].[United Kingdom], [Payment Methods].[PayPal], [Customer Types].[New customers], [Sales Channels].[Direct sales])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef], [Region].[Europe].[United Kingdom], [Payment Methods].[PayPal], [Customer Types].[New customers])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef], [Region].[Europe].[United Kingdom], [Payment Methods].[PayPal])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef], [Region].[Europe].[United Kingdom])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]
where ([Goods].[Foodstuff].[Meat].[Beef])

---

select
[Measures].members on columns,
Date.[2022].Children() on rows
from [Sahara Online Store]

---

select
{
  [Date].[2020],
  [Date].[2021]
} on rows,
{
  [Measures].[Revenue], [Measures].[Cost]
} on columns
from [Airline A];

---

select
{
  Date.[ALL].[2020],
  Date.Root.[2021],
  Date.Calendar.[2022]
} on columns,
{
  [Measures].Revenue,
  [Measures].Cost
} on rows
from [Airline A];

---

select
{
  Date.Root.[2021],
  Date.Calendar.[2022]
} on columns,
{
  [Measures].Cost
} on rows
from [Airline A];

---

select
{
  Date.Calendar.[2022]
} on columns,
{
  [Measures].Cost
} on rows
from [Airline A];

---

select
{
  Date.Calendar.[2022].[Q1].M1,
  Date.Calendar.[2022].[Q1].M2,
  Date.Calendar.[2022].[Q1].M3
} on columns,
{
  [Measures].Revenue,
  [Measures].Cost
} on rows
from [Airline A]
where ([Classes of Service].[Economy Plus], [Aircraft Models].[Airbus].[A318]);

---

select
{
  [Date].[2020],
  [Date].[2021]
} on rows,
{
  [Measures].[Revenue], [Measures].[Cost]
} on columns
from [Airline B];

---

select
{
  Date.[ALL].[2020],
  Date.Root.[2021],
  Date.Calendar.[2022]
} on columns,
{
  [Measures].Revenue,
  [Measures].Cost
} on rows
from [Airline B];

---

select
{
  Date.Root.[2021],
  Date.Calendar.[2022]
} on columns,
{
  [Measures].Cost
} on rows
from [Airline B];

---

select
{
  Date.Calendar.[2022]
} on columns,
{
  [Measures].Cost
} on rows
from [Airline B];

---

select
{
  Date.Calendar.[2022].[Q1].M1,
  Date.Calendar.[2022].[Q1].M2,
  Date.Calendar.[2022].[Q1].M3
} on columns,
{
  [Measures].Revenue,
  [Measures].Cost
} on rows
from [Airline B]
where ([Classes of Service].[Economy Plus], [Aircraft Models].[Airbus].[A318]);

---

with
member [Measures].CUSMBR as IIf(IsEmpty([Measures].Revenue), 0, [Measures].Revenue)
select
Children([Date].[2022].[Q3]) on 1,
{
  [Measures].Revenue,
  [Measures].CUSMBR
} on 0
from [Airline A]
where
([Classes of Service].[Premium Business], [Aircraft Models].[Boeing].[Boeing 737]);

---

with
member [Measures].XXXxxx as "$$Name([Date])" // Name([Date])
select
{
  [Date].[All]
} on 1,
{
  [Measures].XXXxxx
} on 0
from [Airline A];

---

with
member [Measures].XXXxxx as Name([Date].[all])
select
{
  [Date].[All]
} on 1,
{
  [Measures].XXXxxx
} on 0
from [Airline A];

---

select
{ Date.Calendar.[2022].[Q1].M1, Date.Calendar.[2022].[Q1].M2, Date.Calendar.[2022].[Q1].M3 } on columns,
{ [Measures].Revenue, [Measures].Cost } on rows from [Airline A];

---

with member [Measures]._AR_ as LookupCube([Airline A], "([Measures].Cost, Date.[2022].[Q1].M1)")
select
{ Date.Calendar.[2022].[Q1].M1, Date.Calendar.[2022].[Q1].M2, Date.Calendar.[2022].[Q1].M3 } on columns,
{ [Measures].Revenue, [Measures]._AR_ } on rows from [Airline B];

---

with member [Measures]._AR_ as LookupCube("Airline A", ([Measures].Cost, Date.[2022].[Q1].M3))
select
{ Date.Calendar.[2022].[Q1].M1, Date.Calendar.[2022].[Q1].M2, Date.Calendar.[2022].[Q1].M3 } on columns,
{ [Measures].Revenue, [Measures]._AR_ } on rows from [Airline B];

---

with member [Measures]._AR_ as LookupCube("Airline A", ([Measures].Cost, Date.[2022].[Q1].M3) / 100)
select
{ Date.Calendar.[2022].[Q1].M1, Date.Calendar.[2022].[Q1].M2, Date.Calendar.[2022].[Q1].M3 } on columns,
{ [Measures].Revenue, [Measures]._AR_ } on rows from [Airline B];

---

with

// member [Measures].XXXXXX as "$$Name([Date])" // Name([Date])

member [Measures].XXXXXX as IIf([Measures].Cost > 500000000, "QQQ", IIf([Measures].Cost < 450000000, "LLL", [Measures].Cost))

select
Children([Date].[All]) on 1,
{
  [Measures].Cost,
  [Measures].XXXXXX
} on 0
from [Airline A];

---

with
// member [Measures].XXXXXX as "$$Name([Date])" // Name([Date])
member [Measures].XXXXXX as IIf([Measures].Cost > 500000000, "QQQ", IIf([Measures].Cost < 450000000, "LLL", lookupcube("Airline B", [Measures].Cost)))
select
Children([Date].[All]) on 1,
{
  [Measures].Cost,
  [Measures].XXXXXX
} on 0
from [Airline A];

---

select
[Measures].Cost on 1, [Measures].Cost on 99999
from [Airline B];

---

with
member [Measures].XXXxxx as name([Date].[all])
select
{
  [Measures].XXXxxx
} on 0,
{ Date.[2022].Q1 } on 1
from [Airline A];

---

with
member [Measures].XXXxxx as Date.Financial.Name
select
{
  [Measures].XXXxxx
} on 0,
{ Date.[2022].Q1 } on 1
from [Airline A];

---

with
member [Measures].XXXxxx as [Classes of Service].[Premium Economy Class].name()
select
{
  [Measures].XXXxxx
} on 0,
{ Date.[2022].Q1 } on 1
from [Airline A];

---

select
CrossJoin(Children(Date.Calendar.[ALL]), {[Measures].Revenue, [Measures].Cost}) on 0,
CrossJoin(Children([Classes of Service].[ALL]), Children([Aircraft Models].Root)) on 1
from [Airline B];

---

select
{ Date.[2020], Date.[2021], Date.[2022] } on columns,
{ [Measures].Revenue } on rows
from [Airline A];

---

select
{
  [Measures].Revenue
} on columns,
Children([Classes of Service].Root) on rows
from [Airline A];

---

select
  Children([Aircraft Models].[Boeing]) on rows,
  CrossJoin(Children(Date.Root), { [Measures].Cost }) on columns
from [Airline A];

---

with
member [Measures].proportion as ([Measures].Revenue) / ([Classes of Service].[Root], [Measures].Revenue)
select
{ Date.[2019], Date.[2020], Date.[2021], Date.[2022] } on columns,
members([Classes of Service], LEAF) on rows
from [Airline A]
where ([Measures].proportion, [Aircraft Models].[Airbus]);

---

select
children([Aircraft Models].[ALL]) on rows,
children([Date].[ALL]) on columns
from [Airline A]
where ([Measures].Revenue);

---

with
member [Measures].XXXxxx as [Date].[all].Name()
member [Measures].YYYyyy as [Date].[2022].Q3.Name
select
{
  [Date].[All]
} on 1,
{
  [Measures].XXXxxx, [Measures].YYYyyy
} on 0
from [Airline A];

---

select
[Aircraft Models].[ALL].children on rows,
[Date].[ALL].children() on columns
from [Airline A]
where ([Measures].Revenue);

---

with
member [Measures].proportion as ([Measures].Revenue) / ([Classes of Service].[Root], [Measures].Revenue)
select
{ Date.[2019], Date.[2020], Date.[2021], Date.[2022] } on columns,
members([Classes of Service]) on rows
from [Airline A]
where ([Measures].proportion, [Aircraft Models].[Airbus]);

---

with
member [Measures].proportion as ([Measures].Revenue) / ([Classes of Service].[Root], [Measures].Revenue)
select
{ Date.[2019], Date.[2020], Date.[2021], Date.[2022] } on columns,
[Classes of Service].members() on rows
from [Airline A]
where ([Measures].proportion, [Aircraft Models].[Airbus]);

---

with
member [Measures].proportion as ([Measures].Revenue) / ([Classes of Service].[Root], [Measures].Revenue)
select
{ Date.[2019], Date.[2020], Date.[2021], Date.[2022] } on columns,
[Classes of Service].MEMBERS on rows
from [Airline A]
where ([Measures].proportion, [Aircraft Models].[Airbus]);

---

select
lateralMembers
(Date.[2022].Q1.M1) on 100,
{ [Measures].Revenue } on rows
from [Airline A];

---

select 
order(members(Date.Calendar), ([Measures].[Cost]), DESC) on 10, 
{ ([Measures].[Cost]) } on 1 
from [Airline B] ;

---

select
[Measures].[Cost] on 0, 
order(members(Date), ([Measures].Revenue), basc) on 1 
from [Airline A] ;

---

select 
{ (Date.[Calendar].[ALL].[2021]) } on 0, 
topCount(
    crossjoin( // members([Measures]), 
    children([Classes of Service].root), 
    lateralMembers([Aircraft Models].[Boeing].[Boeing 737])), 
    10, 
    (Date.[Calendar].[ALL].[2021])
) on 1 
from [Airline B] ;

---

select 
{ (Date.[Calendar].[ALL].[2021]) } on 0, 
topCount(
    crossjoin(members([Measures]), 
    children([Classes of Service].root), 
    lateralMembers([Aircraft Models].[Boeing].[Boeing 737])), 
    10, 
    (Date.[Calendar].[ALL].[2021])
) on 1 
from [Airline B] ;

---

select 
{ (Date.[Calendar].[ALL].[2021]) } on 0, 
members([Measures]) on 1 
from [Airline B] ;

---

select 
{ (Date.[Calendar].[ALL].[2021]) } on 0, 
members([Measures]) on 1 
from [Airline A] ;

---

select 
except(members(Date), children(Date.[Root])) on 1, 
except(members( [Measures] ), {([Measures].Cost), ([Measures].Revenue)}) on 0 
from [Airline B] 
where ( [Aircraft Models].[Bombardier] );

---

select 
except(members(Date), children(Date.[Root])) on 1, 
except(members( [Measures] ), {([Measures].Cost), ([Measures].Revenue)}) on 0 
// except(members( [Measures] ), {([Measures].Revenue)}) on 0 
from [Airline B] 
where ( [Aircraft Models].[Bombardier] );

---

select 
except(members(Date), children(Date.[Root])) on 1, 
// except(members( [Measures] ), {([Measures].Cost), ([Measures].Revenue)}) on 0 
except(members( [Measures] ), {([Measures].Revenue)}) on 0 
from [Airline B] 
where ( [Aircraft Models].[Bombardier] );

---

with 
member [Measures].SSSSSS 
    as sum(Ytd(), ([Measures].[Cost])) 
select 
    { ([Measures].[Cost]), ([Measures].SSSSSS)} on 1, 
    YTD() on 10 
from [Airline B] 
where (Date.[ALL].[2021].Q4.M12);

---

with 
set SSSSSS 
    as filter(descendants(Date.Calendar.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].[Cost]) > 1) 
member [Measures].XXXXXX 
    as ([Measures].[Cost]) - 20000 
select 
    topPercent(SSSSSS, 25, ([Measures].[Cost])) on 10, 
    {([Measures].XXXXXX)} on 1 
from [Airline A] ;

---

with 
set SSSSSS 
    as filter(descendants(Date.Calendar.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].[Revenue]) > 1) 
member [Measures].XXXXXX 
    as ([Measures].[Revenue]) - 20000 
select 
    topPercent(SSSSSS, 25, ([Measures].[Revenue])) on 10, 
    {([Measures].XXXXXX)} on 1 
from [Airline B] ;

---

with 
set SSSSSS 
  as tail( crossjoin(LATERALMEMBERS([Starting Point].[ALL].[Europe]), LATERALMEMBERS([Measures].Cost)), 8 ) 
SELECT 
  SSSSSS On 10, 
  LATERALMEMBERS([Ending Point].[ALL]) On 1 
frOM [Airline B] ;

---

with 
set SSSSSS 
    as filter(descendants(Date.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].Revenue) > 1) 
member [Measures].XXXXXX 
    as ([Measures].Revenue) - 18000 
select 
    bottomPercent(SSSSSS, 53, ([Measures].[XXXXXX])) on 10, 
    {([Measures].[XXXXXX])} on 1 
from [Airline B] ;

---

with 
set SSSSSS 
    as filter(descendants(Date.Calendar.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].Cost) > 1) 
member [Measures].XXXXXX as 
    ([Measures].Cost) - 20000 
select 
    topPercent(SSSSSS, 55, ([Measures].Cost)) on 10, 
    {([Measures].Cost)} on 1 
from [Airline A] ;

---

select 
  members([Measures]) on 0, 
  intersect(members(Date.[Calendar]), UNION(children(Date.[ALL].[2021]), children(Date.[ALL].[2021].Q3))) on 1 
from [Airline B] ;

---

select 
    members([Measures]) on 0, 
    intersect(members(Date), UNION(children(Date.Calendar.[ALL].[2021]), children(Date.[ALL].[2021].Q1)), ALL) on 1 
from [Airline B] ;

---

select
{
    Date.[ALL].[2020],
    ( Parent(Date.[ALL].[2020].Q1) ),
    Date.[ALL].[2020].Q1,
    ( Parent(Date.[ALL].[2020].Q1.M3) )
} on 10,
{ [Measures].Revenue } on 1
from [Airline A];

---

select
Date.[ALL].[2020].Q1.Parent on 10,
{ [Measures].Revenue } on 1
from [Airline B];

---

select
Date.[ALL].[2020].Q1.Parent().Parent on 10,
{ [Measures].Revenue } on 1
from [Airline A];

---

with 
MEmber [Measures].XXX 
  as ([Measures].[Revenue]) / (paREnt(CurrentMember(Date)), [Measures].[Cost]) 
select 
  { ([Measures].[Cost]), ([Measures].XXX) } ON 0, 
  FIlter(members(Date), ([Measures].[Revenue]) > 350000000) on 1 
from [Airline A];

---

with 
member [Date].PPPPPP 
  as ([Date].[2021].Q1.M2) + ([Date].[2021].Q1.M3) 
member [Measures].MMMMMM as 
  (prevMember(currentMember([Date])), [Measures].Cost) 
select 
  { ([Measures].Cost), ([Measures].MMMMMM) } on 1, 
  filter(members([Date]), ([Measures].Cost) > 600000) on 200 
from [Airline A] 
where ( [Classes of Service].[Premium Business], [Aircraft Models].[Boeing].[Boeing 737] );

---

with 
member Date.XXX as 
  (prevMember([Measures].currentMember()), [Date].[2021]) 
select 
  members([Measures]) on 1, 
  { ( [Date].[2021] ), ([Date].XXX) } on 0 
from [Airline B] 
where ( [Classes of Service].[Premium Business], [Aircraft Models].[Boeing].[Boeing 737], [Ending Point].[Europe], [Starting Point].[Europe] );

---

select 
members([Measures]) on 1, 
{ [Date].[ALL].[2020].FirstChild() } on 0 
from [Airline B];

---

select 
members([Measures]) on 1, 
[Date].[ALL].[2020].LastChild on 10 
from [Airline B];

---

select 
{ ( FirstSibling([Date].[2020]) ) } on 0,
{ ([Measures].Revenue), ([Measures].Cost) } on 100 
from [Airline A];

---

select 
{ [Date].[2020].FirstSibling() } on 0,
{ ([Measures].Revenue), ([Measures].Cost) } on 100 
from [Airline A];

---

select 
( [Date].[2020].FirstSibling() ) on 0,
{ ([Measures].Revenue), ([Measures].Cost) } on 100 
from [Airline B];

---

select 
{ ( LastSibling([Date].[2020]) ) } on 0,
{ ([Measures].Revenue), ([Measures].Cost) } on 100 
from [Airline A];

---

select 
//{ ( LastSibling([Date].[2020]) ) } on 0,
[Date].[2020].LastSibling on 0,
{ ([Measures].Revenue), ([Measures].Cost) } on 100 
from [Airline A];

---

select 
[Date].[2020].LastSibling() on 0,
{ ([Measures].Revenue), ([Measures].Cost) } on 100 
from [Airline B];

---

select
{ 
    [Classes of Service].[ALL].[Business Suite],
    ( Lag ([Classes of Service].[ALL].[Business Suite], 0) )
} on rows,
{
    [Aircraft Models].[ALL].Boeing.[Boeing 747], 
    [Aircraft Models].[ALL].Boeing.[Boeing 777], 
    [Aircraft Models].[ALL].Boeing.[Boeing 787]
} on columns
from [Airline A];

---

select
{ 
    [Classes of Service].[ALL].[Business Suite],
    [Classes of Service].[ALL].[Business Suite].Lag ( 0)
} on rows,
{
    [Aircraft Models].[ALL].Boeing.[Boeing 747], 
    [Aircraft Models].[ALL].Boeing.[Boeing 777], 
    [Aircraft Models].[ALL].Boeing.[Boeing 787]
} on columns
from [Airline A]

---

select
{ 
    [Classes of Service].[ALL].[Business Suite],
    ( Lag ([Classes of Service].[ALL].[Business Suite], -110) ),
    ( Lead([Classes of Service].[ALL].[Business Suite], - 110) )
} on rows,
{
    [Aircraft Models].[ALL].Boeing.[Boeing 747], 
    [Aircraft Models].[ALL].Boeing.[Boeing 777], 
    [Aircraft Models].[ALL].Boeing.[Boeing 787]
} on columns
from [Airline B];

---

select
{ 
    [Classes of Service].[ALL].[Business Suite],
    [Classes of Service].[ALL].[Business Suite].Lag ( -110),
    ( [Classes of Service].[ALL].[Business Suite].Lead( - 110) )
} on rows,
{
    [Aircraft Models].[ALL].Boeing.[Boeing 747], 
    [Aircraft Models].[ALL].Boeing.[Boeing 777], 
    [Aircraft Models].[ALL].Boeing.[Boeing 787]
} on columns
from [Airline B];

---

with 
member [Measures].AAAaaa 
  as ([Measures].[Revenue], parallelPeriod(Date.Calendar.Month, 0 - 3)) 
member [Measures].SSS 
  as ([Measures].[Cost], parallelPeriod(Date.Month, 0)) 
member [Measures].DDD 
  as ([Measures].[Cost], parallelPeriod(Date.Calendar.[Month], 0 - 5)) 
select 
  { (Date.[ALL].[2021].[Q3].M7) } on 0, 
  {([Measures].AAAaaa),([Measures].SSS),([Measures].DDD)} on 1 
from [Airline B] ;

---

select 
{ (ClosingPeriod(
    Date.Calendar.Quarter,
    Date.[ALL].[2021]
)) } on 10,
{ ([Measures].[Revenue]) } on SECTIONS
from [Airline B] ;

---

select 
{ 
    ([Starting Point].[North America], [Ending Point].[Europe], [Aircraft Models].[Airbus].[A320]), 
    ([Ending Point].[Europe], [Classes of Service].[First Class Suite]) 
} on 0, 
{ 
    (OpeningPeriod([Date].[Month])) 
} on 2 
from [Airline B];

---

select
{
  [Measures].Revenue,
  [Measures].Revenue.NextMember,
  [Measures].Cost
} on columns,
{
    Date.[2021].Q4.NextMember(),
    Date.[2022].Q1
} on rows
from [Airline A];

---

select
{
  [Measures].Revenue,
  [Measures].Revenue.NextMember,
  [Measures].Cost
} on columns,
{
    Date.[2021].Q4.NextMember(),
    Date.[2022].Q1,
    Date.Calendar.[all],
    nextmember(Date.Calendar.rOOt)
} on rows
from [Airline A];

---

select
Distinct(
{
  [Measures].Revenue,
  [Measures].Revenue.NextMember,
  [Measures].Cost
}) on columns,
Distinct({
    Date.[2021].Q4.NextMember(),
    Date.[2022].Q1,
    Date.Calendar.[all],
    nextmember(Date.Calendar.rOOt)
}) on rows
from [Airline A];

---

select 
except(members(Date), children(Date.[Root])) on 1, 
except(members( [Measures] ), {([Measures].Revenue)}) on 0 
from [Airline B] 
where ( [Aircraft Models].[Bombardier] );

---

with
member [Measures].[AAaaAA] as // 123
    avg(except(members(Date), children(Date.[Root])), [Measures].Cost)
    // avg(except(members(Date), children(Date.[Root])))
select
[Measures].[AAaaAA] on 0,
[Aircraft Models].[Bombardier] on 1
from [Airline B] ;

---

with
member [Measures].[AAaaAA] as
    avg(except(members(Date), children(Date.[Root])), [Measures].Cost, INCLUDEEMPTY)
select
[Measures].[AAaaAA] on 0,
[Aircraft Models].[Bombardier] on 1
from [Airline B] ;

---

select 
    members([Measures]) on 0, 
    intersect(members(Date), UNION(children(Date.Calendar.[ALL].[2021]), children(Date.[ALL].[2021].Q1)), ALL) on 1 
from [Airline B] ;

---

with

member [Measures].MMax as 
    max(intersect(members(Date), UNION(children(Date.Calendar.[ALL].[2021]), children(Date.[ALL].[2021].Q1)), ALL), [Measures].Revenue)
member [Measures].MMin as 
    min(intersect(members(Date), UNION(children(Date.Calendar.[ALL].[2021]), children(Date.[ALL].[2021].Q1)), ALL), [Measures].Revenue)
select 
    { [Measures].MMax, [Measures].MMin } on 0, 
    [Aircraft Models].Root on 1 
from [Airline B] ;

---

with 
member [Measures].EEEEEE
  as Date.currentMember.name
member [Measures].QQQQQQ
  as Aggregate(Date.members, [Measures].EEEEEE, DistinctCount)
select 
  [Measures].EEEEEE on 1,
  Date.members on 10 
from [Airline B] 
where ([Ending Point].[South America]);

---

with 
member [Measures].EEEEEE
  as Date.currentMember.name
member [Measures].QQQQQQ
  as Aggregate(Date.members, [Measures].EEEEEE, DistinctCount)
select 
  [Measures].QQQQQQ on 1,
  [Ending Point].[South America] on 10 
from [Airline B] 
where ([Ending Point].[South America]);

---

with 
member [Measures].EEEEEE
  as Date.currentMember.name
member [Measures].QQQQQQ
  as Aggregate(Date.[2022].children, [Measures].EEEEEE, DistinctCount)
select 
  [Measures].QQQQQQ on 1,
  [Ending Point].[South America] on 10 
from [Airline B] 
where ([Ending Point].[South America]);

---

with
member Date.AAA as 123
member Date.SSS as 222333
member Date.DDD as 777777777
select
union (
     Date.Quarter.members,
    {Date.AAA, Date.SSS, Date.DDD, Date.AAA}   
 ) on 1,
[Measures].members on 0
from [Airline A]

---

with
set SSSSSSSSS as 
    union (
        Date.Quarter.members,
        {Date.AAA, Date.SSS, Date.DDD, Date.AAA}
    )
member Date.AAA as 123
member Date.SSS as 222333
member Date.DDD as 777777777
member [Measures].XXXXXXXXX as Median(
    SSSSSSSSS,
    [Measures].Cost
)
select
[Aircraft Models].Root on 1,
[Measures].XXXXXXXXX on 0
from [Airline A]

---

with
set SSSSSSSSS as 
    union (
        Date.Quarter.members,
        {Date.AAA, Date.SSS, Date.DDD}   
    )
member Date.AAA as 123
member Date.SSS as 222333
member Date.DDD as 777777777
member [Measures].XXXXXXXXX as Median(
    SSSSSSSSS,
    [Measures].Cost
)
select
[Aircraft Models].Root on 1,
[Measures].XXXXXXXXX on 0
from [Airline A]

---

with
member Date.AAA as 123
member Date.SSS as 222333
member Date.DDD as 777777777
select
{Date.AAA, Date.SSS, Date.DDD, Date.AAA} on 1,
[Measures].members on 0
from [Airline A]

---

with
set SSSSSSSSS as 
    union (
        Date.Quarter.members,
        {Date.AAA, Date.SSS, Date.DDD}
    )
member Date.AAA as 123
member Date.SSS as 222333
member Date.DDD as 777777777
member [Measures].XXXXXXXXX as Median(
    {Date.AAA, Date.SSS, Date.DDD, Date.AAA},
    [Measures].Cost
)
select
[Aircraft Models].Root on 1,
[Measures].XXXXXXXXX on 0
from [Airline A]

---

select
[Measures].Revenue on 0,
crossjoin(Date.[all].children(), children([Aircraft Models].[Airbus])) on 1
from [Airline B]
where ([Classes of Service].[Economy Plus]);

---

with
member [Measures].aaasss as
    rank(
        (Date.root.[2021], [Aircraft Models].[Airbus].[A340]),
        crossjoin(Date.[all].children(), children([Aircraft Models].[Airbus]))
    )
select
[Measures].aaasss on 0,
[Classes of Service].[Economy Plus] on 1
from [Airline B];

---

with
member [Measures].aaasss as
    rank(
        (Date.root.[2021], [Aircraft Models].[Airbus].[A340]),
        {
            (Date.root.[2021], [Aircraft Models].[Airbus].[A380]),
            (Date.root.[2021], [Aircraft Models].[Airbus].[A340])
        }
    )
select
[Measures].aaasss on 0,
[Classes of Service].[Economy Plus] on 1
from [Airline B];

---

select
[Measures].Revenue on 0,
order(
    crossjoin(Date.[all].children(), children([Aircraft Models].[Airbus])),
    [Measures].Revenue
) on 1
from [Airline B]
where ([Classes of Service].[Economy Plus]);

---

with
member [Measures].aaasss as
    rank(
        (Date.root.[2021], [Aircraft Models].[Airbus].[A340]),
        crossjoin(Date.[all].children(), children([Aircraft Models].[Airbus])),
        [Measures].Revenue
    )
select
[Measures].aaasss on 0,
[Classes of Service].[Economy Plus] on 1
from [Airline B];

---

with
member [Measures].aaasss as
    rank(
        (Date.root.[2020], [Aircraft Models].[Airbus].[A320]),
        crossjoin(Date.[all].children(), children([Aircraft Models].[Airbus])),
        [Measures].Revenue
    )
select
[Measures].aaasss on 0,
[Classes of Service].[Economy Plus] on 1
from [Airline B];

---

with 
member [Measures].PPPPPP 
  as abs([Measures].MMMMMM) // ([Date].[2021].Q1.M2) + ([Date].[2021].Q1.M3) 
member [Measures].MMMMMM as [Measures].Cost - 750000
//  (prevMember(currentMember([Date])), [Measures].Cost) 
select 
  { ([Measures].Cost), ([Measures].MMMMMM), [Measures].PPPPPP  } on 1, 
  filter(members([Date]), ([Measures].Cost) > 600000) on 200 
from [Airline A] 
where ( [Classes of Service].[Premium Business], [Aircraft Models].[Boeing].[Boeing 737] );

---

select 
children([Date].[2022]) on rows, 
{ [Measures].Cost } on columns 
from [Airline A]

---

select 
DrilldownLevel(
	{
		[Date].[2022].[Q1],
		[Date].[2022]
	},
	[Date].[Year]
	) on rows, 
{ [Measures].Cost } on columns 
from [Airline A]

---

select 
[Date].[2022].[Q1].Children() on rows, 
{ [Measures].Cost } on columns 
from [Airline B]

---

select 
DrilldownLevel(
    crossjoin(
        [Aircraft Models].root,
        { [Date].[2022].[Q1], [Date].[2022] }
    ), 1
) on rows, 
{ [Measures].Cost } on columns 
from [Airline B]

---

select 
DrilldownLevel(
    crossjoin(
        [Aircraft Models].root,
        { [Date].[2022].[Q1], [Date].[2022] }
    )
) on rows, 
{ [Measures].Cost } on columns 
from [Airline B]

---

select 
DrilldownLevelBottom(
   crossjoin( { [Date].[2022].Q1, [Date].[2022] } , { [Starting Point].[Asia] } ), 2
) on rows, 
{ [Ending Point].[Asia] } on columns 
from [Airline B]
where ([Classes of Service].[Business Suite], [Aircraft Models].[Boeing].[Boeing 787])

---

select 
DrilldownLevelBottom(
   crossjoin( { [Date].[2022].Q4, [Date].[2022] } , { [Starting Point].[Asia] } ), 2, [Measures].Cost
) on rows, 
{ [Ending Point].[Asia] } on columns 
from [Airline B]
where ([Classes of Service].[Business Suite], [Aircraft Models].[Boeing].[Boeing 787])

---

select 
DrilldownLevelBottom(
   crossjoin( { [Date].[2022].Q1, [Date].[2022] } , { [Starting Point].[Asia] } ), 2
) on rows, 
{ [Ending Point].[Asia] } on columns 
from [Airline B]
where ([Classes of Service].[Business Suite], [Aircraft Models].[Boeing].[Boeing 787])

---

select
Date.[2022].children on 1,
[Measures].members on 0
from [Airline B]
where ([Classes of Service].[Business Suite], [Aircraft Models].[Boeing].[Boeing 787], [Starting Point].[Asia]);

---

select
DrilldownLevelBottom(
    crossjoin({ Date.[2022].Q1, Date.[2022] }, [Starting Point].[Asia] )
    , 2
) on rows, 
[Measures].members on 0
from [Airline B]
where ([Classes of Service].[Business Suite], [Aircraft Models].[Boeing].[Boeing 787]);

---

select
DrilldownLevelBottom(
    crossjoin( { [Aircraft Models].[Boeing], [Aircraft Models].[Airbus] }, [Starting Point].[Asia] )
    , 3
    , [Measures].Cost
) on rows, 
[Classes of Service].[Business Suite] on 0
from [Airline B]
where ( [Measures].Cost, [Aircraft Models].[Boeing].[Boeing 787], [Ending Point].[Asia]);

---

select
DrilldownLevelBottom(
    crossjoin( [Starting Point].[Asia], { [Aircraft Models].[Boeing], [Aircraft Models].[Airbus] } )
    , 3
    , [Aircraft Models].[Aircraft Models].Manufacturer
    , [Measures].Revenue
) on rows, 
[Classes of Service].[Business Suite] on 0
from [Airline B]
where ( [Measures].Revenue, [Aircraft Models].[Boeing].[Boeing 787], [Ending Point].[Asia]);

---

select
DrilldownLevelBottom(
    crossjoin( [Starting Point].[Asia], { [Aircraft Models].[Boeing], [Aircraft Models].[Airbus] } )
    , 3
    , [Aircraft Models].[Aircraft Models].Manufacturer
) on rows, 
[Classes of Service].[Business Suite] on 0
from [Airline B]
where ( [Measures].Revenue, [Aircraft Models].[Boeing].[Boeing 787], [Ending Point].[Asia]);

---

select
DrilldownLevelTop(
    crossjoin({ Date.[2022].Q1, Date.[2022] }, [Starting Point].[Asia] )
    , 2
) on rows, 
[Measures].members on 0
from [Airline B]
where ([Classes of Service].[Business Suite], [Aircraft Models].[Boeing].[Boeing 787]);

---

select
DrilldownLevelTop(
    crossjoin( { [Aircraft Models].[Boeing], [Aircraft Models].[Airbus] }, [Starting Point].[Asia] )
    , 3
    , [Measures].Cost
) on rows, 
[Classes of Service].[Business Suite] on 0
from [Airline B]
where ( [Measures].Cost, [Aircraft Models].[Boeing].[Boeing 787], [Ending Point].[Asia]);

---

select
DrilldownLevelTop(
    crossjoin( [Starting Point].[Asia], { [Aircraft Models].[Boeing], [Aircraft Models].[Airbus] } )
    , 3
    , [Aircraft Models].[Aircraft Models].Manufacturer
    , [Measures].Revenue
) on rows, 
[Classes of Service].[Business Suite] on 0
from [Airline B]
where ( [Measures].Revenue, [Aircraft Models].[Boeing].[Boeing 787], [Ending Point].[Asia]);

---

select
DrilldownLevelTop(
    crossjoin( [Starting Point].[Asia], { [Aircraft Models].[Boeing], [Aircraft Models].[Airbus] } )
    , 3
    , [Aircraft Models].[Aircraft Models].Manufacturer
) on rows, 
[Classes of Service].[Business Suite] on 0
from [Airline B]
where ( [Measures].Revenue, [Aircraft Models].[Boeing].[Boeing 787], [Ending Point].[Asia]);

---

select 
DrilldownMember(
    Date.root.children,
    { [Date].[2021] }
) on rows, { [Aircraft Models].Boeing } on columns
 from [Airline A];

---

select 
DrilldownMember(
    Date.root.children,
    { [Date].[2021], [Date].[2021].Q3, [Date].[2021].Q1, [Date].[2022].Q1 },
    recursive
) on rows, { [Aircraft Models].Boeing } on columns
 from [Airline B];

---

select 
DrilldownMemberBottom(
    [Date].[2022],
    [Date].[2022],
    2
) on rows, { [Aircraft Models].Boeing } on columns
 from [Airline B];

---

select 
DrilldownMemberBottom(
    [Date].[2022],
    [Date].[2022],
    2,
    [Measures].Cost
) on rows, { [Aircraft Models].Boeing } on columns
 from [Airline B];

---

select 
DrilldownMemberBottom(
    [Date].[2022],
    { [Date].[2022], [Date].[2022].Q3 },
    2,
    recursive
) on rows, { [Aircraft Models].Boeing } on columns
from [Airline B];

---

select 
DrillupLevel(
    union([Date].root.children, LateralMembers(Date.[2021].Q1.M1))
) on rows, { [Aircraft Models].Boeing } on columns
from [Airline B];

---

select 
DrillupLevel(
    union([Date].root.children, LateralMembers(Date.[2021].Q1), LateralMembers(Date.[2021].Q1.M1)),
    Date.[Quarter]
) on rows, { [Aircraft Models].Boeing } on columns
from [Airline B];

---

select 
DrillupLevel(
    union([Date].root.children, LateralMembers(Date.[2021].Q1), LateralMembers(Date.[2021].Q1.M1)),
    Date.[Month]
) on rows, { [Aircraft Models].Boeing } on columns
from [Airline B];

---

select 
DrillupMember(
    {
        [Date].[2022],
        [Date].[2022].Q1,
        [Date].[2022].Q1.M1
    },
    [Date].[2022].Q1
) on rows, { [Aircraft Models].Boeing } on columns
from [Airline B];

---

with 

member [Measures].[XXXXXX] as 
    Correlation(
        Date.[2022].children,
        [Measures].Revenue,
        [Measures].Cost)

select 

[Measures].[XXXXXX] on rows, 
[Aircraft Models].Root on columns 

from [Airline B];

---

with member [Measures].[xxxxxx] as 
LinRegIntercept(
    [Aircraft Models].root.children,
    [Measures].Cost,
    [Measures].Revenue
)
select 
children([Aircraft Models].root) on rows, 
[Measures].[xxxxxx] on columns 
from [Airline A]

---

with 
member [Measures].[XXXXXX] as 
    LinRegR2(
        Date.[2022].children,
        [Measures].Revenue,
        [Measures].Cost)
select 
[Measures].[XXXXXX] on rows, 
[Aircraft Models].Root on columns 
from [Airline B];

---

with 
member [Measures].[XXXXXX] as 
    LinRegSlope(
        Date.[2022].children,
        [Measures].Revenue,
        [Measures].Cost)
select 
[Measures].[XXXXXX] on rows, 
[Aircraft Models].Root on columns 
from [Airline B];

---

with member [Measures].[xxxxxx] as 
LinRegVariance(
    [Aircraft Models].root.children,
    [Measures].Cost,
    [Measures].Revenue
)
select 
children([Aircraft Models].root) on rows, 
[Measures].[xxxxxx] on columns 
from [Airline A]

---

with member [Measures].[xxxxxx] as 
STDEV(
    [Aircraft Models].root.children
    ,[Measures].Revenue
    )
select 
children([Aircraft Models].root) on rows, 
[Measures].[xxxxxx] on columns 
from [Airline A]

---

with member [Measures].m111 as 0 - 10000
member [Measures].m222 as 4200
member [Measures].m333 as 6800
member [Ending Point].KKKKKK
as
var(
    { [Measures].m111, [Measures].m222, [Measures].m333 }
    )
select 
children([Aircraft Models].root) on rows, 
[Ending Point].KKKKKK on columns 
from [Airline B]

---

with member [Measures].[xxxxxx] as 
STDEV(
    [Aircraft Models].root.children
    ,[Measures].Revenue
    )
select 
ANCESTORS([Aircraft Models].Root.FirstChild.FirstChild, 1) on rows, 
[Measures].[xxxxxx] on columns 
from [Airline A]

---

select
[Measures].Revenue on 0,
order(
    [Aircraft Models].[Airbus].children(),
    [Measures].Revenue
) on 1
from [Airline B]
where ([Classes of Service].[Economy Plus]);

---

select
[Measures].Revenue on 0,
BottomCount(
    [Aircraft Models].[Airbus].children(),
    3
) on 1
from [Airline B]
where ([Classes of Service].[Economy Plus]);

---

with
member [Measures].xxxxxxxxx as
    [Measures].Revenue / 10000000
select
[Measures].xxxxxxxxx on 0,
order(
    [Aircraft Models].[Airbus].children(),
    [Measures].Revenue
) on 1
from [Airline B]
where ([Classes of Service].[Economy Plus]);

---

with
member [Measures].xxxxxxxxx as
    [Measures].Revenue / 10000000
select
[Measures].xxxxxxxxx on 0,
topsum(
    [Aircraft Models].[Airbus].children,
    50,
    [Measures].xxxxxxxxx
) on 1
from [Airline B]
where ([Classes of Service].[Economy Plus]);

---

with
member [Measures].xxxxxxxxx as
    [Measures].Revenue / 10000000
select
[Measures].xxxxxxxxx on 0,
Bottomsum(
    [Aircraft Models].[Airbus].children,
    50,
    [Measures].xxxxxxxxx
) on 1
from [Airline B]
where ([Classes of Service].[Economy Plus]);

---

select
Extract(crossjoin([Aircraft Models].Root.Children(), Date.[2022].Children), [Aircraft Models].[Aircraft Models]) on Rows,
members( [Measures] ) on 0
from [Airline B];

---

SELECT
 Extract(
         {
           ([Date].[2019], [Ending Point].[Africa]), 
           ([Date].[2020], [Ending Point].[North America]), 
           ([Date].[2022].Q1, [Starting Point].[North America]),
           ([Date].[2022].Q2, [Starting Point].[Africa])
         }, Date
 )
ON COLUMNS,
members( [Measures] ) on 1
from [Airline B];

---

select
Extract(
    crossjoin(
        [Aircraft Models].Root.Children(), 
        Date.[2022].Children,
        [Ending Point].[Africa]
    ), 
    [Aircraft Models].[Aircraft Models], Date
) on Rows,
members( [Measures] ) on 0
from [Airline B];

---

WITH MEMBER [Measures].xxxxxxxxx AS   
CASE [Measures].Revenue
   WHEN 0 THEN "NONE"  
   WHEN 1 THEN "SMALL"  
   WHEN 2 THEN "SMALL"  
   WHEN 3 THEN "MEDIUM"  
   WHEN 4 THEN "MEDIUM"  
   WHEN 5 THEN "LARGE"  
   WHEN 6 THEN "LARGE"  
      ELSE "VERY LARGE"  
END  
SELECT Date.[ALL].Children() on 0,
[Starting Point].Root.Children ON 1  
FROM [Airline B]  
WHERE ([Measures].xxxxxxxxx)

---

WITH MEMBER [Measures].xxxxxxxxx AS   
CASE [Measures].Revenue
   WHEN [Measures].Revenue THEN [Measures].Revenue
   WHEN 1 THEN "SMALL"  
   WHEN 2 THEN "SMALL"  
   WHEN 3 THEN "MEDIUM"  
   WHEN 4 THEN "MEDIUM"  
   WHEN 5 THEN "LARGE"  
   WHEN 6 THEN "LARGE"  
      ELSE "VERY LARGE"  
END  
SELECT Date.[ALL].Children() on 0,
[Starting Point].Root.Children ON 1  
FROM [Airline B]  
WHERE ([Measures].xxxxxxxxx)

---

WITH MEMBER [Measures].xxxxxxxxx AS   
CASE [Measures].Revenue
   WHEN 567728820.00 THEN [Measures].Revenue
   WHEN 1 THEN "SMALL"  
   WHEN 2 THEN "SMALL"  
   WHEN 3 THEN "MEDIUM"  
   WHEN 4 THEN "MEDIUM"  
   WHEN 5 THEN "LARGE"  
   WHEN 6 THEN "LARGE"  
      ELSE "VERY LARGE"  
END  
SELECT Date.[ALL].Children() on 0,
[Starting Point].Root.Children ON 1  
FROM [Airline B]  
WHERE ([Measures].xxxxxxxxx)

---

WITH MEMBER [Measures].xxxxxxxxx AS   
CASE 
   WHEN [Measures].QQQQQQ < 100 THEN "small"
   WHEN [Measures].QQQQQQ = 200 THEN "medium"
   WHEN [Measures].QQQQQQ > 300 THEN "large"
      ELSE [Measures].QQQQQQ
END  
member [Measures].QQQQQQ as [Measures].Revenue / 10000000
SELECT Date.[ALL] on 0,
[Starting Point].Root.Children ON 1  
FROM [Airline B]  
WHERE ([Measures].xxxxxxxxx)

---

WITH MEMBER [Measures].xxxxxxxxx AS   
CASE 
   WHEN [Measures].QQQQQQ < 100 THEN "small"
   WHEN [Measures].QQQQQQ = 100 THEN "medium"
   WHEN [Measures].QQQQQQ > 100 and [Measures].QQQQQQ <= 200 THEN "large"
      ELSE [Measures].QQQQQQ
END  
member [Measures].QQQQQQ as [Measures].Revenue / 10000000
SELECT Date.[ALL] on 0,
[Starting Point].Root.Children ON 1  
FROM [Airline B]  
WHERE ([Measures].xxxxxxxxx)

---

WITH MEMBER [Measures].xxxxxxxxx AS   
CASE 
   WHEN not [Measures].QQQQQQ >= 40 THEN "small ?"
   WHEN [Measures].QQQQQQ = 100 THEN [Measures].QQQQQQ
   WHEN not [Measures].QQQQQQ > 50 and [Measures].QQQQQQ <= 60 THEN "hahahahaha"
      ELSE [Measures].QQQQQQ
END  
member [Measures].QQQQQQ as [Measures].Revenue / 10000000
SELECT Date.[ALL].children on 0,
[Starting Point].Root.Children ON 1  
FROM [Airline B]  
WHERE ([Measures].xxxxxxxxx)

---

with member 

[Measures].[XXXXXX] as Sum(
    PeriodsToDate([Date].[Quarter]),
    [Measures].[Revenue]
)

select { [Measures].[XXXXXX] } on rows, 
{ [Classes of Service].Root } on columns from [Airline B]

where ( [Date].[2022].Q3.M9)

---

select PeriodsToDate([Date].[Quarter], [Date].[2022].Q3.M9) on rows, 
{ [Classes of Service].Root } on columns from [Airline B]

---

WITH MEMBER [Date].[First8Months2022] AS  
    Aggregate(  
        PeriodsToDate(  
            [Date].[Calendar].[Year],   
            [Date].[Calendar].[2022].Q3.M8
        )  
    )  
SELECT   
    [Date].[First8Months2022] ON COLUMNS,  
    [Aircraft Models].[ALL].Children ON ROWS  
FROM  
    [Airline A]  
WHERE  
    ([Measures].Cost);

---

SELECT   
    PeriodsToDate(  
            [Date].[Calendar].[Year],   
            [Date].[Calendar].[2022].Q3.M8
        ) ON COLUMNS,  
    [Aircraft Models].[ALL].Children ON ROWS  
FROM  
    [Airline A]  
WHERE  
    ([Measures].Cost);

---

select
PeriodsToDate (Date.Year, Date.[2022].Q3) on 1,
[Measures].members on 0
from [Airline B];
// returns the set:

---

select 
[Aircraft Models].root.Children() on columns, 
QTD( Date.[2022].Q1.M3 )
on rows from [Airline A];

---

SELECT
 Filter([Aircraft Models].members, IsAncestor([Aircraft Models].CurrentMember, [Aircraft Models].Airbus.A380))
ON 11,
[Measures].members on 1
FROM [Airline A]

---

SELECT
 Filter({[Aircraft Models].[Airbus], [Aircraft Models].[Boeing]}, IsAncestor([Aircraft Models].CurrentMember, [Aircraft Models].Airbus.A380))
ON 11,
[Measures].members on 1
FROM [Airline A];

---

select
[Measures].members on 0,
Filter(
    Date.Members,
    IsGeneration(Date.CurrentMember, 1)
) on 1
from [Airline B]

---

select
[Measures].members on 0,
Filter(
    Date.Members,
    IsGeneration(Date.CurrentMember, 2)
) on 1
from [Airline B]

---

select
filter(
    [Classes of Service].members, IsLeaf([Classes of Service].currentmember)
) on 0,
filter(
    [Aircraft Models].members, not IsLeaf([Aircraft Models].currentmember)
) on 1
from [Airline A]

---

select
filter(
    [Classes of Service].members, not IsLeaf([Classes of Service].currentmember)
) on 0,
filter(
    [Aircraft Models].members,  IsLeaf([Aircraft Models].currentmember)
) on 1
from [Airline A]

---

// IsSibling
select
filter(
    [Classes of Service].members, not IsLeaf([Classes of Service].currentmember)
) on 0,
filter(
    [Aircraft Models].members,  IsSibling([Aircraft Models].currentmember, [Aircraft Models].root.FirstChild)
) on 1
from [Airline A]

---

// IsSibling
select
filter(
    [Classes of Service].members, not IsLeaf([Classes of Service].currentmember)
) on 0,
filter(
    [Aircraft Models].members,  IsSibling([Aircraft Models].currentmember, [Aircraft Models].root.FirstChild, include_member)
) on 1
from [Airline B]

---

with
member Date.AAA as 123
member Date.SSS as 222333
member Date.DDD as 777777777
select
{Date.AAA, Date.SSS, Date.DDD, Date.AAA,
    Ancestor(Date.[2022].Q1.M3, 2)
} on 1,
[Measures].members on 0
from [Airline A]

---

with
member Date.AAA as 123
member Date.SSS as 222333
member Date.DDD as 777777777
select
{Date.AAA, Date.SSS, Date.DDD, Date.AAA,
    Date.[2022].Q1.M3.Ancestor(Date.Quarter)
} on 1,
[Measures].members on 0
from [Airline B]

---

select
[Measures].[Cost] on 0, 
{Date.[2022].Q1.M2.Cousin(Date.[2022].Q4), Date.[2022].Q4.M11} on 1
from [Airline A] ;

---

select
{
    Date.DefaultMember,
    Date.Financial.DefaultMember
}
 on 1,
[Measures].members on 0
from [Airline B]

---

with
member [Measures].XXXXXX as Name(Level([Ending Point].CurrentMember))
select
[Ending Point].members on rows,
[Measures].XXXXXX on columns
from [Airline B];

---

with
member [Measures].XXXXXX as [Classes of Service].CurrentMember().Level.Name()
select
[Classes of Service].members on rows,
[Measures].XXXXXX on columns
from [Airline A];

---

with
member [Measures].XXXXXX as Date.CurrentMember().Level.Name()
select
[Date].members on rows,
[Measures].XXXXXX on columns
from [Airline A];

---

select
levels(Date, 1).members on 1,
members([Starting Point].levels("Level 1")) on 0
from [Airline B]

---

with 
member [Measures].EEEEEE
  as Date.currentMember.level.Ordinal() + 200000
member [Measures].QQQQQQ
  as [Measures].EEEEEE + 100000
select 
  [Measures].EEEEEE on 1,
  Date.members on 10 
from [Airline B] 
where ([Ending Point].[South America]);

---

with 
member [Measures].EEEEEE
  // as Date.currentMember.level.Ordinal()
  as Ordinal(Date.currentMember.level)
select 
  [Measures].EEEEEE on 1,
  Date.members on 10 
from [Airline B];

---

WITH SET [Top4 Quarter Services] 
AS 
  Generate (
    Date.[2022].Children,
    TopCount([Classes of Service].Root.Children, 4)
  )
SELECT
 [Top4 Quarter Services]
ON 111, 
 [Measures].members
ON ROWS
FROM [Airline A];

---

WITH SET [Bottom3 Quarter Services] 
AS 
  Generate (
    Date.[2022].Children,
    BottomCount([Classes of Service].Root.Children, 3)
  )
SELECT
 [Bottom3 Quarter Services]
ON 111, 
 [Measures].members
ON ROWS
FROM [Airline A];

---

with 
set SSSSSS 
    as filter(descendants(Date.Calendar.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].[Revenue]) > 1) 
member [Measures].XXXXXX 
    as ([Measures].[Revenue]) - 20000 
select 
    // topPercent(SSSSSS, 25, ([Measures].[Revenue])) on 10, 
    SSSSSS on 2,
    {([Measures].XXXXXX)} on 1 
from [Airline B] ;

---

with 
set SSSSSS 
    as filter(descendants(Date.Calendar.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].[Revenue]) > 1) 
member [Measures].XXXXXX 
    as ([Measures].[Revenue]) - 20000 
select 
    // topPercent(SSSSSS, 25, ([Measures].[Revenue])) on 10, 
    head(SSSSSS) on 2,
    {([Measures].XXXXXX)} on 1 
from [Airline B] ;

---

with 
set SSSSSS 
    as filter(descendants(Date.Calendar.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].[Revenue]) > 1) 
member [Measures].XXXXXX 
    as ([Measures].[Revenue]) - 20000 
select 
    // topPercent(SSSSSS, 25, ([Measures].[Revenue])) on 10, 
    head(SSSSSS, 3) on 2,
    {([Measures].XXXXXX)} on 1 
from [Airline B] ;

---

with 
set SSSSSS 
    as filter(descendants(Date.Calendar.[ALL].[2021], 1, SELF_AND_AFTER), ([Measures].[Revenue]) > 1) 
member [Measures].XXXXXX 
    as ([Measures].[Revenue]) - 20000 
select 
    // topPercent(SSSSSS, 25, ([Measures].[Revenue])) on 10, 
    head(SSSSSS, -3) on 2,
    {([Measures].XXXXXX)} on 1 
from [Airline B] ;

---

select
  Children([Aircraft Models].[Boeing]) on rows,
  CrossJoin(Children(Date.Root), { [Measures].Cost }) on 111
from [Airline A];

---

select
  Children([Aircraft Models].[Boeing]) on rows,
  Subset(
    CrossJoin(Children(Date.Root), { [Measures].Cost }), 0
  ) on 111
from [Airline A];

---

select
  Children([Aircraft Models].[Boeing]) on rows,
  Subset(
    CrossJoin(Children(Date.Root), { [Measures].Cost }), 3, 3
  ) on 111
from [Airline A];

---

select
  Children([Aircraft Models].[Boeing]) on rows,
  Subset(
    CrossJoin(Children(Date.Root), { [Measures].Cost }), 1, 3
  ) on 111
from [Airline A];

---

select
  Children([Aircraft Models].[Boeing]) on rows,
  Subset(
    CrossJoin(Children(Date.Root), { [Measures].Cost }), 100, -101
  ) on 111
from [Airline A];

---

with
member [Measures].[################ finished ################] as 660880
member [Measures].[##########################################] as 660880
select
{ (Date.[ALL]) } on 0,
{
    ([Measures].[##########################################]),
    ([Measures].[################ finished ################]),
    ([Measures].[##########################################])
} on SECTIons
from [Airline B];

---

select { ([Calendar].[2020].[Q1]), ([Calendar].[2020].[Q2]), ([Calendar].[2020].[Q3]), ([Calendar].[2020].[Q4]) } on 0, { ([Payment Method].[Credit Card], measure.[sales amount]), ([Payment Method].[Debit Card], measure.[sales amount]), ([Payment Method].[Account Balance], measure.[sales amount]) } on 1 from [Online Store];
---
with member Calendar.[First half 2020] as ([Calendar].[2020].[Q1]) + ([Calendar].[2020].[Q2]) member Calendar.[Second half 2020] as ([Calendar].[2020].[Q3]) + ([Calendar].[2020].[Q4]) select { ([Calendar].[2020].[Q1]), ([Calendar].[2020].[Q2]), ([Calendar].[2020].[Q3]), ([Calendar].[2020].[Q4]), (Calendar.[First half 2020]), (Calendar.[Second half 2020]) } on 0, { ([Payment Method].[Credit Card]), ([Payment Method].[Debit Card]), ([Payment Method].[Account Balance]) } on 1 from [Online Store];
---
with member [Payment Method].PROPORTION as ([Payment Method].[ALL].[Credit Card]) / ([Payment Method].[ALL]) select { ([Calendar].[2020].[Q1]), ([Calendar].[2020].[Q2]), ([Calendar].[2020].[Q3]), ([Calendar].[2020].[Q4]) } on 0, { ([Payment Method].[ALL].[Credit Card]), ([Payment Method].[ALL]), ([Payment Method].PROPORTION) } on 1 from [Online Store] where (measure.[sales amount]);
---
select children([Goods].[Kitchen & Dining]) on 0, children([Calendar].[ALL].[2021].[Q4]) on 1 from [Online Store] where (measure.[sales amount]);
---
select children([Goods].[Kitchen & Dining]) on 0, children([Calendar].[ALL].[2021].[Q4]) on 1 from [Online Store] where (me__AAAAAAAAASADA___asure.[sales amount]);
---
select children([GoodsXXXXXXXXXXXXXX].[Kitchen & Dining]) on 0, children([Calendar].[ALL].[2021].[Q4]) on 1 from [Online Store] where (measure.[sales amount]);
---
select members([Goods], NOT_LEAF) on 10, members(Calendar, LEAF) on 100 from [Online Store];
---
select members([Goods], NOT_LEAF) on 10, members(Calendar, LEAF) on 100 from [OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO];
---
select { (measure.[sales amount]), (measure.[sales quantity]) } on 10, crossjoin(members([Store Type], LEAF), members([Payment Method], ALL)) on 100 from [Online Store];
---
select { (measure.[sales amount]), (measure.[sales quantity]) } on 10, crossjoin(members([Store Type], LEAF), members([Payment Method], ALL), children([Calendar].[ALL].[2021].[Q4])) on 100 from [Online Store];
---
select { (measure.[sales quantity]), (measure.[sales amount]) } on 10, crossjoin(members([Store Type], LEAF), members([Payment Method], ALL), children([Calendar].[ALL].[2021].[Q4]), children(Goods.[ALL])) on 100 from [Online Store];
---
select members(measure) on 0, crossjoin(children([Store Type].[ALL]), members([Payment Method])) on 1 from [Online Store];
---
select { ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway ), ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway, [measure].[quantity] ), ( [starting region].[ALL].[Asia].[China], Transport.[ALL].highway, [measure].[quantity] ), ( Goods.[ALL].[foods].[nut], Transport.[ALL].[railway], [starting region].[ALL].[Asia].[China] ) } on 0, { ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut], [measure].[income] ), ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut] ), ( [starting date].[ALL].[2019].[Q3].[M9], Goods.[ALL].[foods].[wine] ), ( [ending region].[ALL].[Asia].[China], [starting date].[ALL].[2019].[Q3].[M7], [completion date].[ALL].[2019].[Q3].[M7] ) } on 1 from [logistics.test] ;
---
select { ([Goods].[foods],[Transport].[railway],[starting region].[Europe].[UK]), ([Transport].[highway],[starting region].[Asia].[Japan]) } on 0, { ([starting region].[America].[Chile],[ending region].[Asia].[China]), ([ending region].[Asia].[South Korea]), ([starting date].[2019].[Q3].[M8],[completion date].[2020].[Q2],[Goods].[foods]) } on 1, { ([completion date].[2020].[Q4],[Goods].[foods],[Transport].[ocean freight]), ([Goods].[foods],[Transport].[railway]), ([Transport].[highway]), ([starting region].[Europe].[Greece]) } on 2 from [logistics.test];
---
select { ( Goods.[foods].[nut], Transport.[highway], [starting region].[Europe].[UK], [ending region].[Asia].[South Korea], [starting date].[2019].[Q3].[M8], [completion date].[2020].[Q4] ), ( [ending region].[Asia].[South Korea], [starting date].[2019].[Q3].[M8], [completion date].[2020].[Q4], Goods.[foods].[nut], Transport.[highway], [starting region].[Europe].[UK] ) } on 0 from [logistics.test] ;
---
select { ( Goods.[foods].[beef], Transport.[aviation], [starting region].[Asia].[Japan], [ending region].[America].[U.S], [starting date].[2019].[Q3].[M7] ), ( Goods.[foods].[beef], Transport.[aviation], [starting region].[Asia].[Japan], [ending region].[America].[U.S], [starting date].[2019].[Q3].[M7] ), ( Goods.[foods].[beef], Transport.[aviation], [starting region].[Asia].[Japan], [ending region].[America].[U.S], [starting date].[2019].[Q3].[M7] ), ( [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [measure].[quantity] ), ( [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [measure].[income] ), ( [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [measure].[cost] ), ( [starting region].[America].[Chile], [ending region].[Europe].[UK], [starting date].[2020].[Q4].[M11], [completion date].[2020].[Q4].[M12], [measure].[quantity] ), ( Goods.[household appliances].[television], Transport.[ocean freight], [starting region].[America].[Chile], [ending region].[Europe].[UK] ), ( Goods.[household appliances].[television], Transport.[ocean freight], [starting region].[America].[Chile], [ending region].[Europe].[UK], [starting date].[2020].[Q4].[M11], [completion date].[2020].[Q4].[M12] ) } on 0, { ( [completion date].[2020].[Q1].[M1], [measure].quantity ), ( [completion date].[2020].[Q1].[M1], [measure].income ), ( [completion date].[2020].[Q1].[M1], [measure].cost ), ( Goods.[household appliances].[television], Transport.[ocean freight], [starting date].[2021].[Q2].[M5], [completion date].[2020].[Q1].[M3] ), ( Goods.[household appliances].[television], Transport.[ocean freight], [starting date].[2021].[Q2].[M5], [completion date].[2020].[Q1].[M3] ), ( [starting date].[2021].[Q2].[M5], [completion date].[2020].[Q1].[M3], Goods.[household appliances].[television], Transport.[ocean freight] ), ( Goods.[household appliances].[television], Transport.[ocean freight] ), ( [ending region].[Europe].[UK], [starting date].[2020].[Q4].[M11], [completion date].[2020].[Q4].[M12], [measure].[income] ), ( Goods.[household appliances].[television], Transport.[ocean freight], [starting region].[America].[Chile], [ending region].[Europe].[UK], [starting date].[2020].[Q4].[M11], [completion date].[2020].[Q4].[M12], [measure].[cost] ) } on 1 from [logistics.test] ;
---
select { ([ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3], measure.cost ) } on 0, { (Goods.[household appliances].[television], Transport.[ocean freight], [starting region].[Europe].[UK] ) } on 1, { ( [starting date].[2021].[Q2].[M5] ) } on 2 from [logistics.test] ;
---
select { ([ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3], measure.cost ) } on 0, { (Goods.[household appliances].[television], Transport.[ocean freight], [starting region].[Europe].[UK] ) } on 1 from [logistics.test] where ( [starting date].[2021].[Q2].[M5] );
---
select { ( measure.cost, [ending region].[Asia].[China] ), ( measure.cost, [ending region].[Asia].[Japan] ), ( measure.cost, [ending region].[Asia].[South Korea] ), ( measure.cost, [ending region].[America].[U.S] ), ( measure.cost, [ending region].[America].[Mexico] ), ( measure.cost, [ending region].[America].[Chile] ), ( measure.cost, [ending region].[Europe].[Greece] ), ( measure.cost, [ending region].[Europe].[Italy] ), ( measure.cost, [ending region].[Europe].[UK] ), ( measure.cost, [ending region].[Asia] ), ( measure.cost, [ending region].[America] ), ( measure.cost, [ending region].[Europe] ) } on 0 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
with member [measure].[MM001] as (measure.cost) + (measure.cost) * (measure.cost) - (measure.cost) select { ( measure.cost, [ending region].[Asia].[China] ), ( measure.cost, [ending region].[Asia].[Japan] ), ( measure.cost, [ending region].[Asia].[South Korea] ), ( measure.cost, [ending region].[America].[U.S] ), ( measure.cost, [ending region].[America].[Mexico] ), ( measure.cost, [ending region].[America].[Chile] ), ( measure.cost, [ending region].[Europe].[Greece] ), ( measure.cost, [ending region].[Europe].[Italy] ), ( measure.cost, [ending region].[Europe].[UK] ), ( measure.cost, [ending region].[Asia] ), ( measure.cost, [ending region].[America] ), ( measure.cost, [ending region].[Europe] ), ( measure.MM001, [ending region].[Europe] ), ( measure.MM001, [ending region].[Asia] ) } on 0 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
with member [ending region].CCCCCC as ([ending region].[Asia].[China]) * ([ending region].[America].[U.S]) / ([ending region].[Europe].[Greece]) + ([ending region].[Europe].[Italy]) member [ending region].AAAAAA as ([ending region].[Asia].[China]) * 1000000000 + ([ending region].[America].[U.S]) member [ending region].X as (([ending region].[Europe].[Greece]) * ((([ending region].[Asia].[China]) * ([ending region].[America].[U.S]) / ([ending region].[Europe].[Greece]) + ([ending region].[Europe].[Italy])) + 1000) - ([ending region].[Europe].[Italy])) / 0.5 member [ending region].XX as ((((((((((((((((((([ending region].[Asia]))))))))))))))))))) + ((([ending region].[Asia].[China]))) * 10000 select { ( measure.cost, [ending region].[Asia].[China] ), ( measure.cost, [ending region].[America].[U.S] ), ( measure.cost, [ending region].[Europe].[Greece] ), ( measure.cost, [ending region].[Europe].[Italy] ), ( measure.cost, [ending region].CCCCCC ), ( measure.cost, [ending region].AAAAAA ), ( measure.cost, [ending region].X ), ( measure.cost, [ending region].XX ) } on 0 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
with set SSSSSS as children( [ending region].Asia ) select SSSSSS on 999 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
with set QQQ as XXX set XXX as children( [Goods].[electronic product] ) select children([starting date].[2021]) on 0, QQQ on 111 from [logistics.test] where ( [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy], measure.cost );
---
with set QQQ as XXX set XXX as children( parent([Goods].[electronic product].computer) ) select children( parent( parent( [starting date].[2021].Q1.M3 ) ) ) on 0, QQQ on 111 from [logistics.test] where ( [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy], measure.income );
---
with member [measure].[FFFFFF] as sum( {(measure.income), (measure.cost)}, ([Goods].[electronic product].computer) ) select { (measure.cost), (measure.income), ([measure].[FFFFFF]) } on 0, children( [starting date].[2021].Q1 ) on 1 from [logistics.test] where ( [Goods].[electronic product].[mobile phone], [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy] );
---
with member [measure].[FFFFFF] as sum( {(measure.income), (measure.cost)}, ([Goods].[electronic product].computer) ) member [starting date].SSSSSS as sum( children( [starting date].[2021] ), ([Goods].[electronic product].computer) ) select { (measure.cost), (measure.income), ([measure].[FFFFFF]) } on 0, { ([starting date].[2021].Q1.M1), ([starting date].[2021].Q1.M2), ([starting date].[2021].Q1.M3), ([starting date].SSSSSS) } on 1 from [logistics.test] where ( [Goods].[electronic product].[mobile phone], [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy] );
---
with member [starting date].SSSSSS as sum( { ([starting date].[2021].Q1), ([starting date].[2021].Q2), ([starting date].[2021].Q3), ([starting date].[2021].Q4) } ) member Goods.GGGGGG as sum( { ([Goods].[electronic product].[mobile phone]), ([Goods].[electronic product].computer), ([Goods].[electronic product].[smart watch]) } ) select { ([starting date].[2021].Q1), ([starting date].[2021].Q2), ([starting date].[2021].Q3), ([starting date].[2021].Q4), ([starting date].SSSSSS) } on 0, { ([Goods].[electronic product].[mobile phone]), ([Goods].[electronic product].computer), ([Goods].[electronic product].[smart watch]), (Goods.GGGGGG) } on 1 from [logistics.test] where ( Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3], measure.cost );
---
with member [starting date].SSSSSS as sum( { ([starting date].[2021].Q1), ([starting date].[2021].Q2), ([starting date].[2021].Q3), ([starting date].[2021].Q4) } ) member Goods.GGGGGG as sum( { ([Goods].[electronic product].[mobile phone]), ([Goods].[electronic product].computer), ([Goods].[electronic product].[smart watch]) } ) select { ([starting date].[2021].Q1), ([starting date].[2021].Q2), ([starting date].[2021].Q3), ([starting date].[2021].Q4), ([starting date].SSSSSS) } on 0, { ([Goods].[electronic product].[mobile phone]), ([Goods].[electronic product].computer), ([Goods].[electronic product].[smart watch]), (Goods.GGGGGG) } on 1 from [logistics.test] where ( Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion---date].[2020].[Q1].[M3], measure.cost );
---
select { ([starting date].[2021].Q1), ([starting date].[2021].Q2) } on 999, { (measure.income), (measure.cost) } on 100 from [logistics.test] where ( [Goods].[electronic product].[computer] , Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3] );
---
select children( [starting date].[2021].Q1 ) on 999, { (measure.income), (measure.cost) } on 100 from [logistics.test] where ( [Goods].[electronic product].[computer] , Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3] );
---
select members(Goods) on 0, crossJoin(members(measure), members([ending region])) on 1 from [logistics.test] ;
---
select members(Goods) on 0, crossJoin(members(measure), members([ending region])) on 1 from [LLLLLLLLLLLLLLLLL];
---
with member [starting date].PPPPPP as ([starting date].[2021].Q1.M2) + ([starting date].[2021].Q1.M3) member [measure].MMMMMM as (measure.income) * (measure.cost) select { (measure.income), (measure.cost), ([measure].MMMMMM) } on 100, { ([starting date].[2021].Q1.M1), ([starting date].[2021].Q1.M2), ([starting date].[2021].Q1.M3), ([starting date].PPPPPP) } on 200 from [logistics.test] where ( [Goods].[electronic product].[computer] , Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3] );
---
with member [starting date].PPPPPP as ([starting date].[2021].Q1.M2) + ([starting date].[2021].Q1.M3) member [measure].MMMMMM as (measure.income) * (measure.cost) select { (measure.income), (measure.cost), ([measure].MMMMMM) } on 1000, { ([starting date].[2021].Q1.M1), ([starting date].[2021].Q1.M2), ([starting date].[2021].Q1.M3), ([starting date].PPPPPP) } on 200 from [logistics.test] where ( [Goods].[electronic product].[computer] , Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3] );
---
with member measure.SSSSSS as sum({ (measure.XXX), (measure.YYY), (measure.ZZZ) }) member measure.XXX as ([measure].[sales amount]) * 10 member measure.YYY as ((measure.XXX) + 9900000000) member measure.ZZZ as (measure.YYY) / 8 - 222.22 select { ([measure].[sales amount]), (measure.XXX), (measure.YYY), (measure.ZZZ), (measure.SSSSSS) } on 0, members(Calendar) on 1 from [Online Store] ;
---
with member measure.SSSSSS as sum({ (measure.XXX), (measure.YYY), (measure.ZZZ) }) member measure.XXX as ([measure].[sales amount]) * 10 member measure.YYY as ((measure.XXX) + 9900000000) member measure.ZZZ as (measure.YYY) / 8 - 222.22 member measure.QQQ as sum({([measure].[sales amount]), ([measure].[cash back])}) member Calendar.VVV as sum({ ([Calendar].[ALL].[2020]), ([Calendar].[ALL].[2019]) }) select { ([measure].[sales amount]), ([measure].[cash back]), (measure.XXX), (measure.YYY), (measure.ZZZ), (measure.SSSSSS) } on 0, { ([Calendar].[ALL].[2019]), ([Calendar].[ALL].[2020]), (Calendar.VVV) } on 1 from [Online Store] ;
---
with member Calendar.SSSSSS as count(members(Calendar)) member Calendar.EEE as count(members(Calendar), EXCLUDEEMPTY) member Calendar.III as count(members(Calendar), INCLUDEEMPTY) select { ([measure].[sales amount]), ([measure].[cash back]) } on 0, { ([Calendar].[ALL].[2019]), ([Calendar].[ALL].[2020]), (Calendar.SSSSSS), (Calendar.EEE), (Calendar.III) } on 1 from [Online Store] ;
---
with member Calendar.SSSSSS as count(members(Calendar)) member Calendar.EEE as count(members(Calendar), EXCLUDEEMPTY) member Calendar.III as count(members(Calendar), INCLUDEEMPTY) select { ([measure].[sales amount]), ([measure].[cash back]) } on 0, members(Calendar) on 1 from [Online Store] ;
---
select {(measure.[sales amount])} on 0, {(measure.[sales amount])} on 1 from [Online Store];
---
select { ([measure].[sales amount]) } on 0, filter({ ([Calendar].[ALL].[2020].[Q1]), ([Calendar].[ALL].[2020]) }, ([measure].[sales amount]) > 29.999 ) on 1 from [Online Store] where ([Store Type].[ALL].[Platform Self-operated Store],[Payment Method].[ALL].[Credit Card],[Goods].[ALL].[Kitchen & Dining].[Bento Boxes]);
---
select members(measure) on 1, filter(members(Calendar), ((((([measure].[sales amount]) < 240)))) ANd ((((([measure].[sales amount]) >= 30)))) ) on 99999999 from [Online Store] where ([Store Type].[ALL].[Platform Self-operated Store],[Payment Method].[ALL].[Credit Card],[Goods].[ALL].[Kitchen & Dining].[Bento Boxes]) ;
---
select { ([Store Type].[ALL]) } on 0, filter(members(Calendar), ([Store Type].[ALL]) > 17279.999999999) on 1 from [Online Store] ;
---
select { ([Store Type].[ALL]) } on 0, filter(members(Calendar), (([Store Type].[ALL]) <= 2000) oR ([Store Type].[ALL]) > 30000) on 1 from [Online Store] ;
---
select { ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway ) } on 0, filter({ ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut], [measure].[income] ), ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut] ), ( [starting date].[ALL].[2019].[Q3].[M9], Goods.[ALL].[foods].[wine] ), ( [ending region].[ALL].[Asia].[China], [starting date].[ALL].[2019].[Q3].[M7], [completion date].[ALL].[2019].[Q3].[M7] ) }, ((Transport.[ALL].railway) > 0) OR (1 < 2)) on 1 from [logistics.test] ;
---
select { ( measureSSSSSSSSSSSSSSSS.cost, [ending region].[Asia].[China] ), ( measureVVVVVVVVVVVVVVVVVVVVVVV.cost, [ending region].[Asia].[Japan] ), ( measure.cost, [ending region].[Asia].[South Korea] ), ( measure.cost, [ending region].[America].[U.S] ), ( measure.cost, [ending region].[America].[Mexico] ), ( measure.cost, [ending region].[America].[Chile] ), ( measure.cost, [ending region].[Europe].[Greece] ), ( measure.cost, [ending region].[Europe].[Italy] ), ( measure.cost, [ending region].[Europe].[UK] ), ( measure.cost, [ending region].[Asia] ), ( measure.cost, [ending region].[America] ), ( measure.cost, [ending region].[Europe] ) } on 0 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
with member [Payment Method].PROPORTION as ([Payment Method].[ALL].[Credit Card]) / ([Payment Method].[ALL]) select { ([Calendar].[2020].[Q4]) } on 10, filter( { ([Payment Method].[ALL].[Credit Card]), ([Payment Method].[ALL]), ([Payment Method].PROPORTION) }, (measure.[sales amount]) <> 4320 ) on 1 from [Online Store] where (measure.[sales amount]);
---
with member measure.SSSSSS as sum({ (measure.XXX), (measure.YYY), (measure.ZZZ) }) member measure.XXX as ([measure].[sales amount]) * 10 member measure.YYY as ((measure.XXX) + 111) member measure.ZZZ as (measure.YYY) / 8 - 222.22 member measure.QQQ as sum({([measure].[sales amount]), ([measure].[cash back])}) member Calendar.VVV as sum({ ([Calendar].[ALL].[2020]), ([Calendar].[ALL].[2019]) }) select { (measure.SSSSSS), ([measure].[sales amount]), ([measure].[cash back]), (measure.XXX), (measure.YYY), (measure.ZZZ) } on 0, filter(members(Calendar), (((measure.SSSSSS) <= 30000) or ((measure.SSSSSS) >= 40000)) and (((measure.SSSSSS) <= 360000) or ((measure.SSSSSS) >= 370000))) on 1 from [Online Store] ;
---
with set QQQ as XXX set XXX as children( parent([Goods].[electronic product].computer) ) select children( parent( parent( [starting date].[2021].Q1.M3 ) ) ) on 0, filter(QQQ, (parent( [starting date].[2021].Q1.M3 )) <> 9003) on 111 from [logistics.test] where ( [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy], measure.income );
---
WITH set QQQ as XXX set XXX as children( parent([Goods].[electronic product].computer) ) SELECT chILDren( parent( parent( [starting date].[2021].Q1.M3 ) ) ) On 0, filter(QQQ, (parent( [starting date].[2021].Q1.M3 )) <> 9003) On 111 frOM [logistics.test] whERE ( [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy], measure.income );
---
select { ([Store Type].[ALL]) } on 0, { (parent(Calendar.[ALL].[2020]), parent([Payment Method].[ALL])) } on 1 from [Online Store] ;
---
select { ([Store Type].[ALL]) } on 0, { (parent(Calendar.[ALL].[2020]), parent([Payment.......................... Method].[ALL])) } on 1 from [Online Store];
---
with MEmber measure.XXX as ([measure].[sales amount]) / (paREnt(CurrentMember(Calendar)), [measure].[sales amount]) select { ([measure].[sales amount]), (measure.XXX) } ON 0, FIlter(members(Calendar), ([measure].[sales amount]) > 4000) on 1 from [Online Store] ;
---
with MEmber measure.XXX as ([measure].[sales amount]) / (paREnt(CurrentMember(Calendar)), [measure].[sales amount]) select { ([measure].[sales amount]), (measure.XXX) } ON 0, FIlter(members(Calendar), ([measure].[sales amount]) > 4000) on 1 from [SSSSSSSSSSSSSSSSSSSS];
---
with member [starting date].PPPPPP as ([starting date].[2021].Q1.M2) + ([starting date].[2021].Q1.M3) member [measure].MMMMMM as (prevMember(currentMember([starting date])), measure.cost) select { (measure.cost), ([measure].MMMMMM) } on 1, filter(members([starting date]), (measure.cost) > 1) on 200 from [logistics.test] where ( [Goods].[ALL].[electronic product].[computer] , Transport.[ALL].railway, [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [completion date].[ALL].[2020].[Q1].[M3] );
---
with member [starting date].XXX as (prevMember(currentMember([measure])), [starting date].[2021]) select members(measure) on 1, { ( [starting date].[2021] ), ([starting date].XXX) } on 0 from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select { (Calendar.[ALL].[2021].Q2.M4), (Calendar.[ALL].[2021].Q3.M7) } on 0, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
select { (Calendar.[ALL].[2021].Q3.M7), (Calendar.[ALL].[2021].Q4.M10) } on 0, { (measure.[sales amount]) } on 1 from [Online Store] ;

---
with 
    member measure.XXX as (measure.[sales amount], parallelPeriod()) 
select 

    { (Calendar.[ALL].[2021].Q3.M7), (Calendar.[ALL].[2021].Q4.M10) } 
on 0, 

    { (measure.XXX) } 
on 1 

from [Online Store] ;
---
select { (Calendar.[ALL].[2020].Q4.M12), (Calendar.[ALL].[2021].Q4.M12) } on 0, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
with member measure.XXX as (measure.[sales amount], parallelPeriod(Calendar.year)) select { (Calendar.[ALL].[2021].Q4.M12) } on 0, { (measure.XXX) } on 1 from [Online Store] ;
---
select { (Calendar.[ALL].[2021].Q4.M12) } on 1, { (measure.[sales amount], parallelPeriod(Calendar.year)) } on 0 from [Online Store] ;
---
select { (Calendar.[ALL].[2021].Q1.M2), (Calendar.[ALL].[2021].Q3.M8), (Calendar.[ALL].[2021].Q4.M11) } on 0, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
with member measure.XXX as (measure.[sales amount], parallelPeriod(Calendar.quarter, 3)) select { (Calendar.[ALL].[2021].Q4.M11) } on 0, { (measure.XXX) } on 1 from [Online Store] ;
---
with member measure.XXX as (measure.[sales amount], parallelPeriod(Calendar.quarter, 0 - 2, Calendar.[ALL].[2021].Q1.M2)) select { (Calendar.[ALL].[2021].Q4.M11) } on 0, { (measure.XXX) } on 1 from [Online Store] ;
---
with member measure.XXX as (measure.[sales amount], parallelPeriod(Calendar.year, 0 - 1)) select { (Calendar.[ALL].[2020].Q4.M11) } on 0, { (measure.XXX) } on 1 from [Online Store] ;
---
with member measure.XXX as (measure.[sales amount], parallelPeriod(Calendar.year, 0 - 1)) select { (Calendar.[ALL].[2020].Q4.M11) } on 0, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
select { (Calendar.[ALL].[2021].Q4.M11) } on 0, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
with member measure.AAA as (measure.[sales amount], parallelPeriod(Calendar.month, 0 - 3)) member measure.SSS as (measure.[sales quantity], parallelPeriod(Calendar.month, 0)) member measure.DDD as (measure.[cash back], parallelPeriod(Calendar.month, 0 - 5)) select { (Calendar.[ALL].[2021].[Q3].M7) } on 0, {(measure.AAA),(measure.SSS),(measure.DDD)} on 1 from [Online Store] ;
---
select LateralMembers(Calendar.[ALL].[2020].Q4) on 0, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
select LateralMembers(measure.[sales amount]) on 1, LateralMembers(Calendar.[ALL].[2020].Q4) on 10 from [Online Store] ;
---
SELECT crossjoin(LATERALMEMBERS([starting region].[ALL].[Europe]), LATERALMEMBERS(measure.income)) On 10, LATERALMEMBERS([completion date].[ALL]) On 1 frOM [logistics.test] ;
---
select order(members(Calendar), (measure.[sales amount])) on 10, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
select order(members(Calendar), (measure.[sales amount]), ASC) on 10, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
select order(members(Calendar), (measure.[sales amount]), DESC) on 10, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
select order(members(Calendar), (measure.[sales amount]), BASC) on 10, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
with member [starting date].PPPPPP as ([starting date].[2021].Q1.M2) + ([starting date].[2021].Q1.M3) member [measure].MMMMMM as (prevMember(currentMember([starting date])), measure.cost) select { (measure_____CCCCCCCCC.cost), ([measure].MMMMMM) } on 1, filter(members([starting date]), (AAAAAAA_________measure.cost) > 1) on 200 from [logistics.test] where ( [Goods].[ALL].[electronic product].[computer] , Transport.[ALL].railway, [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [completion date].[ALL].[2020].[Q1].[M3] );
---
select order(members(Calendar), (measure.[sales amount]), BASC) on 10, { (measure.[sales amount]) } on 1 from [MMMMMMMMMMMMMMMMMMMMMMMMM];
---
select order(members(Calendar), (measure.[sales amount]), BDESC) on 10, { (measure.[sales amount]) } on 1 from [Online Store] ;
---
select { (measure.[sales amount]) } on 0, order(members(Calendar), (measure.[sales amount]), basc) on 1 from [Online Store] ;
---
select { ([Calendar].[ALL].[2021]) } on 0, topCount(crossjoin(members(measure), children([Store Type].[ALL]), lateralMembers([Payment Method].[ALL].Other)), 10, ([Calendar].[ALL].[2021])) on 1 from [Online Store] ;
---
select members(Goods) on 0, crossJoin(members(measure), members([ending region])) on 1 from [logistics.test] ;
---
select except(members(Goods), children(Goods.[foods])) on 1, { ( measure.cost ) } on 0 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
select except(members(Goods), children(Goods.[foods])) on 1, except(members( measure ), {(measure.cost), (measure.income)}) on 0 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
select crossJoin(members(measure), lateralMembers(Goods.[ALL].[foods])) on 1, {([starting date].[ALL].[2020])} on 0 from [logistics.test];
---
select crossJoin(members(measure), lateralMembers(Goods00000000000000000000000000000.[ALL].[foods])) on 1, {([starting date].[ALL].[2020])} on 0 from [logistics.test];
---
with set [~~~!!!@@@...] as crossJoin({(measure.cost), (measure.quantity)}, {([Goods].[ALL].[Cell Phones & Accessories]), ([Goods].[ALL].[household appliances])}) select except(crossJoin(members(measure), lateralMembers(Goods.[ALL].[foods])), [~~~!!!@@@...]) on 1, {([starting date].[ALL].[2020])} on 0 from [logistics.test];
---
with member measure.SSSSSS as sum(Ytd(), (measure.[sales amount])) select { (measure.[sales amount]), (measure.SSSSSS)} on 1, YTD() on 10 from [Online Store] where (Calendar.[ALL].[2021].Q4.M12, [Payment Method].[ALL].[Credit Card]);
---
with member measure.SSSSSS as sum(Ytd(), (measure.[sales amount])) select { (measure.[sales amount]), (measure.SSSSSS)} on 1, YTD(Calendar.[ALL].[2021].Q2.M5) on 10 from [Online Store] where (Calendar.[ALL].[2021].Q4.M12, [Payment Method].[ALL].[Credit Card]);
---
select members(measure) on 1, Descendants([starting date].[ALL].[2021], [starting date].[quarter]) on 0 from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select members(measure) on 1, Descendants([starting date].[ALL].[2021], [starting date].[month]) on 0 from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select members(measure) on 1, Descendants([starting date].[ALL].[2021], [starting date].[month], BEFORE) on 0 from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select members(measure) on 1, Descendants([starting date].[ALL], [starting date].[quarter]) on 10 from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select members(measure) on 1, Descendants([starting date].[ALL], [starting date].[quarter], BEFORE_AND_AFTER) on 10 from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select members(measure) on 1, Descendants([starting date].[ALL], 20, LEAVES) on 10 from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select members(measure) on 1, Descendants([starting date].[ALL], 3) on 10 from [logistics.test] ;
---
with set SSSSSS as tail( crossjoin(LATERALMEMBERS([starting region].[ALL].[Europe]), LATERALMEMBERS(measure.income)) ) SELECT SSSSSS On 10, LATERALMEMBERS([completion date].[ALL]) On 1 frOM [logistics.test] ;
---
with set SSSSSS as tail( crossjoin(LATERALMEMBERS([starting region].[ALL].[Europe]), LATERALMEMBERS(measure.income)), 8 ) SELECT SSSSSS On 10, LATERALMEMBERS([completion date].[ALL]) On 1 frOM [logistics.test] ;
---
with set SSSSSS as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measureWWWWWWWWWWWWWWWWWW.[sales amount]) > 1) member measure.XXXXXX as (measuZZZZZZZZZZZZZZZZZZZre.[sales amount]) - 18000 select bottomPercent(SSSSSS, 53, (measure.[XXXXXX])) on 10, {(measure.[XXXXXX])} on 1 from [Online Store] ;
---
with set SSSSSS as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measure.[sales amount]) > 1) member measure.XXXXXX as (measure.[sales amount]) - 20000 select topPercent(SSSSSS, 25, (measure.[sales amount])) on 10, {(measure.XXXXXX)} on 1 from [Online Store] ;
---
with set SSSSSS as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measure.[sales amount]) > 1) member measure.XXXXXX as (measure.[sales amount]) - 20000 select bottomPercent(SSSSSS, 25, (measure.[sales amount])) on 10, {(measure.[sales amount])} on 1 from [Online Store] ;
---
with set SSSSSS as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measure.[sales amount]) > 1) member measure.XXXXXX as (measure.[sales amount]) - 20000 select topPercent(SSSSSS, 55, (measure.[sales amount])) on 10, {(measure.[sales amount])} on 1 from [Online Store] ;
---
with set SSSSSS as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measure.[sales amount]) > 1) member measure.XXXXXX as (measure.[sales amount]) - 18000 select bottomPercent(SSSSSS, 53, (measure.[XXXXXX])) on 10, {(measure.[XXXXXX])} on 1 from [Online Store] ;
---
with select members(measure) on 999, UNION(crossJoin(children(Goods.[ALL].[foods]), children([starting region].[ALL])), crossJoin(children(Goods.[ALL].[foods]), children([starting region].[ALL]))) on 111111 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
with select members(measure) on 999, UNION(crossJoin(children(Goods.[ALL].[foods]), children([starting region].[ALL])), crossJoin(children(Goods.[ALL].[foods]), children([starting region].[ALL])), All) on 111111 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
select members(measure) on 0, intersect(members(Calendar), children(Calendar.[ALL].[2021])) on 1 from [Online Store] ;
---
select members(measure) on 0, intersect(members(Calendar), UNION(children(Calendar.[ALL].[2021]), children(Calendar.[ALL].[2021].Q3))) on 1 from [Online Store] ;
---
select members(measure) on 0, intersect(members(Calendar), UNION(children(Calendar.[ALL].[2021]), children(Calendar.[ALL].[2021].Q1)), ALL) on 1 from [Online Store] ;
---
with 
member measure.SSSSSS as lookUpCube("logistics.test", "(measure.cost)") 
select 
{ ( measure.[sales amount] ), (measure.SSSSSS) } on 0, 
children(Calendar.[ALL].[2021]) on 1 
from [Online Store] ;
---
with member measure.AAAAAA as LOOKUPCUBE("Online Store", "(measure.[sales amount])") member measure.BBBBBB as LOOKUPCUBE("Online Store", (measure.[sales amount], Calendar.[ALL].[2021].Q3)) member measure.CCCCCC as LOOKUPCUBE([Online Store], "(measure.[sales amount], Calendar.[ALL].[2021].Q4) + (measure.[sales quantity], Calendar.[ALL].[2021].Q3)") member measure.DDDDDD as LOOKUPCUBE([Online Store], (measure.[cash back])) select { (measure.cost), (measure.AAAAAA), (measure.BBBBBB), (measure.CCCCCC), (measure.DDDDDD) } on 0, children(Goods.[ALL]) on 1 from [logistics.test] ;
---
with member measure.SSSSSS as sum({ (measure.XXX), (measure.YYY), (measure.ZZZ) }) member measure.XXX as ([measure].[sales amount]) * 10 member measure.YYY as ((measure.XXX) + 111) member measure.ZZZ as (measure.YYY) / 8 - 222.22 member measure.QQQ as sum({([measure].[sales amount]), ([measure].[cash back])}) member Calendar.VVV as sum({ ([Calendar].[ALL].[2020]), ([Calendar].[ALL].[2019]) }) member measure.IIIIII as IIF( (measure.SSSSSS) > 2000000, 200, 404 ) select { (measure.SSSSSS), (measure.IIIIII) } on 0, filter(members(Calendar), (((measure.SSSSSS) <= 30000) or ((measure.SSSSSS) >= 40000)) and (((measure.SSSSSS) <= 360000) or ((measure.SSSSSS) >= 370000))) on 1 from [Online Store] ;
---
with member measure.SSSSSS as sum({ (measure.XXX), (measure.YYY), (measure.ZZZ) }) member measure.XXX as ([measure].[sales amount]) * 10 member measure.YYY as ((measure.XXX) + 111) member measure.ZZZ as (measure.YYY) / 8 - 222.22 member measure.QQQ as sum({([measure].[sales amount]), ([measure].[cash back])}) member Calendar.VVV as sum({ ([CalendarCCCCCCCCCCCCCCCCCCCCC].[ALL].[2020]), ([Calendar].[ALL].[2019]) }) member measure.IIIIII as IIF( (measure.SSSSSS) > 2000000, 200, 404 ) select { (measure.SSSSSS), (measure.IIIIII) } on 0, filter(members(Calendar), (((measure.SSSSSS) <= 30000) or ((measure.SSSSSS) >= 40000)) and (((measure.SSSSSS) <= 360000) or ((measure.SSSSSS) >= 370000))) on 1 from [Online Store] ;
---
with member measure.SSSSSS as sum({ (measure.XXX), (measure.YYY), (measure.ZZZ) }) member measure.XXX as ([measure].[sales amount]) * 10 member measure.YYY as ((measure.XXX) + 111) member measure.ZZZ as (measure.YYY) / 8 - 222.22 member measure.QQQ as sum({([measure].[sales amount]), ([measure].[cash back])}) member Calendar.VVV as sum({ ([Calendar].[ALL].[2020]), ([Calendar].[ALL].[2019]) }) member measure.IIIIII as IIF( (measure.SSSSSS) > 2000000, 200, 404 ) member measure.FFFFFF as IIF( (measure.IIIIII) = 200, 321, 900000000 ) select { (measure.SSSSSS), (measure.IIIIII), (measure.FFFFFF) } on 0, filter(members(Calendar), (((measure.SSSSSS) <= 30000) or ((measure.SSSSSS) >= 40000)) and (((measure.SSSSSS) <= 360000) or ((measure.SSSSSS) >= 370000))) on 1 from [Online Store] ;
---
with member measure.AAA as CoalesceEmpty((measure.[cash back]), (measure.[sales quantity])) select { (measure.[sales quantity]), (measure.[cash back]), (measure.AAA) } on 0, { (Calendar.[ALL]) } on 1 from [Online Store] ;
---
with member measure.AAA as CoalesceEmpty(CoalesceEmpty((measure.[cash back]), (measure.[cash back], [Store Type].[ALL].[Platform Self-operated Store])), 8760.66) select { (measure.[sales amount]), (measure.[cash back]), (measure.AAA) } on 0, { (Calendar.[ALL]) } on 1 from [Online Store] ;
---
select { (measure.[sales quantity]), (measure.[sales amount]) } on 10, crossjoin(members([Store Type], LEAF), members([Payment Method], ALL), children([Calendar].[CCCCCCCCCCCCCCCCC].[2021].[Q4]), children(Goods.[ALL])) on 100 from [Online Store];
---
select { ( [starting region].[ALL].[Asia].[VVVVVVVVVVVVVV], Transport.[ALL].railway ) } on 0, filter({ ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut], [measure].[income] ), ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut] ), ( [starting date].[ALL].[2019].[Q3].[M9], Goods.[ALL].[foods].[wine] ), ( [ending region].[ALL].[Asia].[China], [starting date].[ALL].[2019].[Q3].[M7], [completion date].[ALL].[2019].[Q3].[M7] ) }, ((Transport.[ALL].railway) > 0) OR (1 < 2)) on 1 from [logistics.test] ;
---
select { ([Calendar].[ALL].[2021]) } on 0, topCount(crossjoin(members(measure), children([Store Type].[ALL]), lateralMembers([Payment Method].[___________________].Other)), 10, ([Calendar].[ALL].[2021])) on 1 from [Online Store] ;
---
with select members(measure) on 999, UNION(crossJoin(children(Goods.[(*&^%^%^SSSSSSSSSSSSS].[foods]), children([starting region].[ALL])), crossJoin(children(Goods.[ALL].[foods]), children([starting region].[ALL]))) on 111111 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
select { ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway ), ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway, [measure].[quantity] ), ( [starting region].[ALL].[Asia].[China], Transport.[ALL].highway, [measure].[quantity] ), ( Goods.[ALL].[foods].[nut], Transport.[ALL].[railway], [starting region].[ALL].[Asia].[China] ) } on 0, { ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut], [measure].[inc~!@#$%`123@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.....ome] ), ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut] ), ( [starting date].[ALL].[2019].[Q3].[M9], Goods.[ALL].[foods].[wine] ), ( [ending region].[ALL].[Asia].[China], [starting date].[ALL].[2019].[Q3].[M7], [completion date].[ALL].[2019].[Q3].[M7] ) } on 1 from [logistics.test] ;
---
with set QQQ as XXX set XXX as children( parent([Goods].[electronic product].computer) ) select children( parent( parent( [starting date].[2021].Q1.M3 ) ) ) on 0, QQQ on 111 from [logistics.test] where ( [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy], measure.in__________________come );
---
select children( [starting date].[2021].Q1 ) on 999, { (measure.incAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAome), (measure.cost) } on 100 from [logistics.test] where ( [Goods].[electronic product].[computer] , Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3] );
---
select except(members(Goods), children(Goods.[foods])) on 1, except(members( measure ), {(measure.coCCCCCCCCCCCCCCCCCCCCst), (measure.income)}) on 0 from [logistics.test] where ( Goods.[foods].[nut], Transport.[railway], [starting region].[Asia].[China], [starting date].[2019].[Q3].[M7], [completion date].[2019].[Q3].[M7] );
---
with member measure.SSSSSS as lookUpCube("logistics.test", "(measure.cVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVost)") select { ( measure.[sales amount] ), (measure.SSSSSS) } on 0, children(Calendar.[ALL].[2021]) on 1 from [Online Store] ;
---
select 
children([Goods].[Kitchen & Dining]) on COLUMNS, 
children([Calendar].[ALL].[2021].[Q4]) on rows 
from [Online Store] where (me__AAAAAAAAASADA___asure.[sales amount]);
---
select 
{ 
    ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway ), 
    ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway, [measure].[quantity] ), 
    ( [starting region].[ALL].[Asia].[China], Transport.[ALL].highway, [measure].[quantity] ), 
    ( Goods.[ALL].[foods].[nut], Transport.[ALL].[railway], [starting region].[ALL].[Asia].[China] ) 
} on 555, 
{ 
    ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut], [measure].[income] ), 
    ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut] ), 
    ( [starting date].[ALL].[2019].[Q3].[M9], Goods.[ALL].[foods].[wine] ), 
    ( [ending region].[ALL].[Asia].[China], [starting date].[ALL].[2019].[Q3].[M7], [completion date].[ALL].[2019].[Q3].[M7] ) 
} on 666
from [logistics.test] ;
---
with member [starting date].SSSSSS as sum( { ([starting date].[2021].Q1), ([starting date].[2021].Q2), ([starting date].[2021].Q3), ([starting date].[2021].Q4) } ) member Goods.GGGGGG as sum( { ([Goods].[electronic product].[mobile phone]), ([Goods].[electronic product].computer), ([Goods].[electronic product].[smart watch]) } ) 
select 
{ 
    ([starting date].[2021].Q1), ([starting date].[2021].Q2), 
    ([starting date].[2021].Q3), ([starting date].[2021].Q4), ([starting date].SSSSSS) 
} on PAGES, 
{ 
    ([Goods].[electronic product].[mobile phone]), ([Goods].[electronic product].computer), 
    ([Goods].[electronic product].[smart watch]), (Goods.GGGGGG) 
} on rows
from [logistics.test] where ( Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3], measure.cost );
---
select members(measure) on SEctiONS, 
filter(members(Calendar), ((((([measure].[sales amount]) < 240)))) ANd ((((([measure].[sales amount]) >= 30)))) ) 
on 99999999 
from [Online Store] where ([Store Type].[ALL].[Platform Self-operated Store],[Payment Method].[ALL].[Credit Card],[Goods].[ALL].[Kitchen & Dining].[Bento Boxes]) ;
---
select { (Calendar.[ALL].[2021].Q3.M7), (Calendar.[ALL].[2021].Q4.M10) } on PAGES, 
{ (measure.[sales amount]) } on SECTIONS
from [Online Store] ;
---
select order(members(Calendar), (measure.[sales amount]), ASC) on 10, 
{ (measure.[sales amount]) } on SECTIONS
from [Online Store] ;
---
select crossJoin(members(measure), lateralMembers(Goods00000000000000000000000000000.[ALL].[foods])) on 10101, 
{([starting date].[ALL].[2020])} on sectioNS
from [logistics.test];
---
select 
members(measure) on 1, 
Descendants([starting date].[ALL], 20, LEAVES) on rows
from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
with set SSSSSS as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measure.[sales amount]) > 1) member measure.XXXXXX as (measure.[sales amount]) - 20000 
select bottomPercent(SSSSSS, 25, (measure.[sales amount])) on rows, 
{(measure.[sales amount])} on 1 
from [Online Store] ;
---
with member measure.SSSSSS as sum({ (measure.XXX), (measure.YYY), (measure.ZZZ) }) member measure.XXX as ([measure].[sales amount]) * 10 member measure.YYY as ((measure.XXX) + 111) member measure.ZZZ as (measure.YYY) / 8 - 222.22 member measure.QQQ as sum({([measure].[sales amount]), ([measure].[cash back])}) member Calendar.VVV as sum({ ([CalendarCCCCCCCCCCCCCCCCCCCCC].[ALL].[2020]), ([Calendar].[ALL].[2019]) }) member measure.IIIIII as IIF( (measure.SSSSSS) > 2000000, 200, 404 ) 
select 
{ (measure.SSSSSS), (measure.IIIIII) } on rows, 
filter(members(Calendar), (((measure.SSSSSS) <= 30000) or ((measure.SSSSSS) >= 40000)) and (((measure.SSSSSS) <= 360000) or ((measure.SSSSSS) >= 370000))) 
on SECTIONS from [Online Store] ;
---
select 
{ 
    ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway ), 
    ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway, [measure].[quantity] ), 
    ( [starting region].[ALL].[Asia].[China], Transport.[ALL].highway, [measure].[quantity] ), 
    ( Goods.[ALL].[foods].[nut], Transport.[ALL].[railway], [starting region].[ALL].[Asia].[China] ) 
} on SECTIONS, 
{ 
    ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut], [measure].[inc~!@#$%`123@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.....ome] ), 
    ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut] ), 
    ( [starting date].[ALL].[2019].[Q3].[M9], Goods.[ALL].[foods].[wine] ), 
    ( [ending region].[ALL].[Asia].[China], [starting date].[ALL].[2019].[Q3].[M7], [completion date].[ALL].[2019].[Q3].[M7] ) 
} on 1666 
from [logistics.test] ;
---
select 
{ [Store Type].[ALL] } on 0, 
{ (parent(Calendar.[ALL].[2020]), parent([Payment Method].[ALL])) } on 1 
from [Online Store] ;
---
select 
{ 
    [Calendar].[2020].[Q1], [Calendar].[2020].[Q2], [Calendar].[2020].[Q3], [Calendar].[2020].[Q4] 
} on 0, 
{ 
    ([Payment Method].[Credit Card], measure.[sales amount]), 
    ([Payment Method].[Debit Card], measure.[sales amount]), 
    ([Payment Method].[Account Balance], measure.[sales amount]) 
} on 1 from [Online Store];
---
select 
{ 
    ([Goods].[foods],[Transport].[railway],[starting region].[Europe].[UK]), 
    ([Transport].[highway],[starting region].[Asia].[Japan]) 
} on 0, 
{ 
    ([starting region].[America].[Chile],[ending region].[Asia].[China]), 
    [ending region].[Asia].[South Korea], 
    ([starting date].[2019].[Q3].[M8],[completion date].[2020].[Q2],[Goods].[foods]) 
} on 1, 
{ 
    ([completion date].[2020].[Q4],[Goods].[foods],[Transport].[ocean freight]), 
    ([Goods].[foods],[Transport].[railway]), 
    [Transport].[highway], 
    [starting region].[Europe].[Greece] 
} on 2 
from [logistics.test];
---
select 
children( [starting date].[2021].Q1 ) on 999, 
{ 
    measure.income, measure.cost 
} on 100 
from [logistics.test] where ( [Goods].[electronic product].[computer] , Transport.railway, [starting region].[Europe].[UK], [ending region].[Europe].[Italy], [completion date].[2020].[Q1].[M3] );
---
select 
{ 
    [measure].[sales amount] 
} on 0, 
filter({ [Calendar].[ALL].[2020].[Q1], [Calendar].[ALL].[2020] }, ([measure].[sales amount]) > 29.999 ) on 1 
from [Online Store] where ([Store Type].[ALL].[Platform Self-operated Store],[Payment Method].[ALL].[Credit Card],[Goods].[ALL].[Kitchen & Dining].[Bento Boxes]);
---
select { [Calendar].[ALL].[2021] } on 0, 
topCount(crossjoin(members(measure), children([Store Type].[ALL]), lateralMembers([Payment Method].[___________________].Other)), 10, ([Calendar].[ALL].[2021])) on 1 from [Online Store] ;
---
with member [starting date].XXX as (prevMember(currentMember([measure])), [starting date].[2021]) 
select 
members(measure) on 1, 
{ [starting date].[2021], [starting date].XXX } on 0 
from [logistics.test] where (Goods.[ALL].[household appliances].[television], Transport.[ALL].[ocean freight], [starting region].[ALL].[Europe].[UK], [ending region].[ALL].[Europe].[Italy], [starting date].[ALL].[2021].[Q2].[M4], [completion date].[ALL].[2020].[Q1].[M1]) ;
---
select 
{ Calendar.[ALL].[2021].Q4.M12 } on 1, 
{ (measure.[sales amount], parallelPeriod(Calendar.year)) } on 0 
from [Online Store] ;
---
with member measure.XXX as (measure.[sales amount], parallelPeriod(Calendar.year, 0 - 1)) 
select { Calendar.[ALL].[2020].Q4.M11 } on 0, 
{ measure.[sales amount] } on 
1 from [Online Store] ;
---
select 
order(members(Calendar), (measure.[sales amount]), ASC) on 10, 
{ measure.[sales amount] } on 1 
from [Online Store] ;
---
select { Calendar.[ALL].[2021].Q1.M2, Calendar.[ALL].[2021].Q3.M8, Calendar.[ALL].[2021].Q4.M11 } on 0, 
{ measure.[sales amount] } on 1 from [Online Store] ;
---
with 
set SSSSSS as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measure.[sales amount]) > 1) 
member measure.XXXXXX as (measure.[sales amount]) - 20000 
select 
bottomPercent(SSSSSS, 25, (measure.[sales amount])) on 10, 
{measure.[sales amount]} on 1 
from [Online Store] ;
---
select 
crossJoin(members(measure), lateralMembers(Goods00000000000000000000000000000.[ALL].[foods])) on 10101, 
{[starting date].[ALL].[2020]} on sectioNS
from [logistics.test];
---
with member [Payment Method].PROPORTION as ([Payment Method].[ALL].[Credit Card]) / ([Payment Method].[ALL]) 
select { [Calendar].[2020].[Q4] } on 10, filter( { [Payment Method].[ALL].[Credit Card], 
[Payment Method].[ALL], [Payment Method].PROPORTION }, (measure.[sales amount]) <> 4320 ) on 1 
from [Online Store] where (measure.[sales amount]);
---
select
{ measure.[sales amount], measure.[sales quantity], measure.[cash back] } on 0,
{ [Calendar].[ALL].[2020].[Q1].[M1] } on ROWS
from [Online Store]
where
(
    [Store Type].[ALL].[Platform Self-operated Store],
    [Payment Method].[ALL].[Credit Card],
    [Goods].[ALL].[Kitchen & Dining].[Bento Boxes]
);
---
select { ( [starting region].[ALL].[Asia].[China], Transport.[ALL].railway ) } on 0, filter({ ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut], [measure].[income] ), ( [starting date].[ALL].[2019].[Q4].[M10], Goods.[ALL].[foods].[nut] ), ( [starting date].[ALL].[2019].[Q3].[M9], Goods.[ALL].[foods].[wine] ), ( [ending region].[ALL].[Asia].[China], [starting date].[ALL].[2019].[Q3].[M7], [completion date].[ALL].[2019].[Q3].[M7] ) }, ((Transport.[ALL].railway) > 0) OR (1 < 2)) on 1 from [nonexistent measure];
---
select members([Payment Method], LEAF) on 1, members([Store Type], LEAF) on 2 from [Online Store];
---
select
members([Transport], LEAF) on 12220,
members([starting date], LEAF) on 111
from [logistics.test]
where ([Goods].[ALL].[electronic product].[computer], [starting region].[ALL].[America].[U.S], [ending region].[ALL].[Europe].[Italy], [completion date].[ALL].[2021].[Q2].[M4]);
---
select Members([Aircraft Type]) on 1, members([Service Type]) on 0 from [Airline Turnover];
---
select
{[Date].[ALL].[2020], [Date].[ALL].[2021], [Date].[ALL].[2022]} on columns,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on rows
from [Airline Turnover];
---
with member [measure].proportion as ([measure].Turnover) / ([Service Type].[ALL], [measure].Turnover)
select
{Date.[ALL].[2020],Date.[ALL].[2021],Date.[ALL].[2022]} on 1,
members([Service Type], LEAF) on 0
from [Airline Turnover]
where ([measure].proportion, [Aircraft Type].[ALL].[Airbus].[Airbus A380]);
---
select members(Date) on 1, members([Aircraft Type]) on 2 from [Airline Cost Of Flight];
---
select members([Aircraft Type]) on 1, members(Destination) on 2 from [Flight Passengers Statistics];
---
select
{[Date].[ALL].[2020], [Date].[ALL].[2021], [Date].[ALL].[2022]} on rows,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on columns
from [Airline Turnover];

---

with member [measure].proportion as ([measure].Turnover) / ([Service Type].[ALL], [measure].Turnover)
select
{Date.[ALL].[2020],Date.[ALL].[2021],Date.[ALL].[2022]} on 1,
members([Service Type], LEAF) on 0
from [Airline Turnover]
where ([measure].proportion, [Aircraft Type].[ALL].[Airbus].[Airbus A380]);

---

select 
{
    ([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes])
} on 0, 
crossJoin( { ( [Payment Method].[ALL].[Credit Card] ) } , members([Calendar], LEAF)) on 1
from [Online Store];

---

select 
{
    ([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes])
} on 0, 
crossJoin( { ( [Payment Method].[ALL].[Credit Card] ) } , Descendants([Calendar].[ALL].[2021], [Calendar].[month])) on 1
from [Online Store];

---

select 
{ 
    ([Calendar].[ALL].[2020].[Q1]), 
    ([Calendar].[ALL].[2020].[Q2])
} on 0, 
{ 
    ([Payment Method].[ALL].[Credit Card], measure.[sales amount])
} on 1 
from [Online Store];

---

select 
crossJoin(members([Store Type], LEAF), members([Goods], LEAF)) on 0, 
crossJoin(members([Payment Method], LEAF), members([Calendar], LEAF)) on 1
from [Online Store];

---

select
{
    ([Payment Method].[ALL].[Credit Card], [Calendar].[ALL].[2019].[Q1].[M1])
} on 0,
{
    ([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes])
} on 1
from [Online Store]
where (measure.[sales amount]);

---

select
{
    ([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes])
} on 0,
crossJoin(members([Payment Method], LEAF), members([Calendar], LEAF)) on 1
from [Online Store]
where (measure.[sales amount]);

---

select 
    { ( [starting date].[2021].Q1.M3 ) }  on 0, 
    {([Goods].[electronic product].computer)}  on 1 
from [logistics.test] 
where ( [completion date].[2020].[Q1].[M3], Transport.[railway], [starting region].[Europe].[UK], [ending region].[Europe].[Italy], measure.cost );
---
with 
member measure.PROPORTION 
as (measure.Turnover, currentMember(Date)) / (measure.Turnover, parent(currentMember(Date)))
select
children([Date].[ALL].[2022]) on 0,
{ measure.Turnover, measure.PROPORTION } on 1
from [Airline Turnover];

---

select
{ Date.[ALL].[2022] } on 0,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select
{ (ClosingPeriod()) } on 0,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select
{ Date.[ALL].[2020] } on 0,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select
{ (OpeningPeriod()) } on 0,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select 
{ ([Goods].[foods],[Transport].[railway],[starting region].[Europe].[UK]), ([Transport].[highway],[starting region].[Asia].[Japan]) } on 0, 
{ (ClosingPeriod([starting region].[country])) } on 2 
from [logistics.test];

---

select 
{ ([Goods].[foods],[Transport].[railway],[starting region].[Europe].[UK]), ([Transport].[highway],[starting region].[Asia].[Japan]) } on 0, 
{ [starting region].[ALL].Europe.UK } on 2
from [logistics.test];

---

select 
{ ([Goods].[foods],[Transport].[railway],[starting region].[Europe].[UK]), ([Transport].[highway],[starting region].[Asia].[Japan]) } on 0, 
{ (OpeningPeriod([starting region].[country])) } on 2 
from [logistics.test];

---

select 
{ ([Goods].[foods],[Transport].[railway],[starting region].[Europe].[UK]), ([Transport].[highway],[starting region].[Asia].[Japan]) } on 0, 
{ [starting region].[ALL].[Asia].[China] } on 2 
from [logistics.test];

---

select 
{ (ClosingPeriod(
    Calendar.quarter,
    Calendar.[ALL].[2021]
)) } on 10,
{ (measure.[sales amount]) } on SECTIONS
from [Online Store] ;

---

select 
{ Calendar.[ALL].[2021].Q4 } on 10,
{ (measure.[sales amount]) } on SECTIONS
from [Online Store] ;

---

select 
{ (OpeningPeriod(
    Calendar.month,
    Calendar.[ALL].[2021].Q3
)) } on 10,
{ (measure.[sales amount]) } on SECTIONS
from [Online Store] ;

---

select 
{ Calendar.[ALL].[2021].Q3.M7 } on 10,
{ (measure.[sales amount]) } on SECTIONS
from [Online Store] ;

---

select 
members(measure) on 1, 
{ ( FirstChild([starting date].[ALL].[2020]) ) } on 0 
from [logistics.test];

---

select 
members(measure) on 1, 
{ ( LastChild([starting date].[ALL].[2020]) ) } on 0 
from [logistics.test];

---

select 
{ ( FirstSibling([starting date].[2020]) ) } on 0,
{ (measure.income), (measure.cost) } on 100 
from [logistics.test];

---

select 
{ ( LastSibling([starting date].[2020]) ) } on 0,
{ (measure.income), (measure.cost) } on 100 
from [logistics.test];

---

select
{ 
    [Service Type].[ALL].[Business Suite],
    ( Lag ([Service Type].[ALL].[Business Suite], 0) ),
    ( Lead([Service Type].[ALL].[Business Suite], 0) )
} on rows,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on columns
from [Airline Turnover];

---

select
{ 
    [Service Type].[ALL].[Business Suite],
    ( Lag ([Service Type].[ALL].[Business Suite], 110) ),
    ( Lead([Service Type].[ALL].[Business Suite], 110) )
} on rows,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on columns
from [Airline Turnover];

---

select
{ 
    [Service Type].[ALL].[Business Suite],
    ( Lag ([Service Type].[ALL].[Business Suite], 2) ),
    ( Lead([Service Type].[ALL].[Business Suite], 2) )
} on rows,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on columns
from [Airline Turnover];

---

select
{ 
    [Service Type].[ALL].[Business Suite],
    ( Lag ([Service Type].[ALL].[Business Suite], -110) ),
    ( Lead([Service Type].[ALL].[Business Suite], - 110) )
} on rows,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on columns
from [Airline Turnover];

---

select
{ 
    [Service Type].[ALL].[Business Suite],
    ( Lag ([Service Type].[ALL].[Business Suite], -
    2) ),
    ( Lead([Service Type].[ALL].[Business Suite], -2) )
} on rows,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on columns
from [Airline Turnover];

---

select
{ Date.[ALL].[2020] } on 0,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select
{
    Date.[ALL].[2020],
    ( Parent(Date.[ALL].[2020].Q1) ),
    Date.[ALL].[2020].Q1,
    ( Parent(Date.[ALL].[2020].Q1.March) )
} on 10,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select
{
    Date.[ALL],
    Date.[ALL].[2020],
    Date.[ALL].[2020].Q1
} on 100,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select
Date.[ALL].[2020].Q1.Parent on 10,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select
Date.[ALL].[2020].Q1.Parent().Parent on 10,
{ measure.Turnover } on 1
from [Airline Turnover];

---

select 
[Calendar].[2020].[Q1] on 0, 
([Payment Method].[Credit Card], measure.[sales amount]) on 1 
from [Online Store];

---

select 
[Calendar].[2020].[Q1] on 0, 
{ ([Payment Method].[Credit Card], measure.[sales amount]) } on 1 
from [Online Store];

---

select
{
    measure.[sales amount]
} on 0,
crossJoin(members([Payment Method], LEAF), members([Calendar], LEAF)) on 1
from [Online Store]
where
([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes]);

---

with
member measure.EEEEEEEEE as IIf(isEmpty( (measure.[sales amount]) ), 1000, 2000)
select
{
    measure.[sales amount],
    measure.EEEEEEEEE
} on 0,
crossJoin(members([Payment Method], LEAF), members([Calendar], LEAF)) on 1
from [Online Store]
where
([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes]);

---

select
measure.[sales amount] on 0,
Filter(
    crossJoin(members([Payment Method], LEAF), members([Calendar], LEAF)),
    isEmpty((measure.[sales amount]))
) on 1
from [Online Store]
where
([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes]);

---

with
member measure.EEEEEEEEE as IIf(isEmpty(measure.[sales amount]), 1000, 2000)
select
{
    measure.[sales amount],
    measure.EEEEEEEEE
} on 0,
crossJoin(members([Payment Method], LEAF), members([Calendar], LEAF)) on 1
from [Online Store]
where
([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes]);

---

with
member measure.EEEEEEEEE as IIf(isEmpty(measure.[sales amount]), 1000, 2000)
select
{
    measure.[sales amount],
    (measure.EEEEEEEEE)
} on 0,
crossJoin(members([Payment Method], LEAF), members([Calendar], LEAF)) on 1
from [Online Store]
where
([Store Type].[ALL].[Platform Self-operated Store], [Goods].[ALL].[Kitchen & Dining].[Bento Boxes]);

---

with 
member Calendar.[First half 2020] 
as [Calendar].[2020].[Q1] + [Calendar].[2020].[Q2]
member Calendar.[Second half 2020] as ([Calendar].[2020].[Q3]) + [Calendar].[2020].[Q4]
select 
{ 
    ([Calendar].[2020].[Q1]), 
    ([Calendar].[2020].[Q2]), 
    ([Calendar].[2020].[Q3]), 
    ([Calendar].[2020].[Q4]), 
    Calendar.[First half 2020], 
    Calendar.[Second half 2020]
} on 0, 
{ 
    ([Payment Method].[Credit Card]), 
    [Payment Method].[Debit Card], 
    ([Payment Method].[Account Balance]) 
} on 1 
from [Online Store];

---

with 
member measure.XXX 
    as (measure.[sales amount], parallelPeriod(Calendar.year)) 
select 
{ Calendar.[ALL].[2021].Q4.M12 } on 0, 
{ measure.XXX } on 1 
from [Online Store] ;


---

with 
member measure.SSSSSS as lookUpCube("logistics.test", "(measure.cost)") 
select 
{ ( measure.[sales amount] ), measure.SSSSSS } on 0, 
children(Calendar.[ALL].[2021]) on 1 
from [Online Store] ;

---

with member [measure].proportion as [measure].Turnover / ([Service Type].[ALL], [measure].Turnover)
select
{Date.[ALL].[2020],Date.[ALL].[2021],Date.[ALL].[2022]} on 1,
members([Service Type], LEAF) on 0
from [Airline Turnover]
where ([measure].proportion, [Aircraft Type].[ALL].[Airbus].[Airbus A380]);

---

select
{ 
    [Service Type].[ALL].[Business Suite],
    Lag ([Service Type].[ALL].[Business Suite], -
    2),
    Lead([Service Type].[ALL].[Business Suite], -2)
} on rows,
{
    [Aircraft Type].[ALL].Boeing.[Boeing 747], 
    [Aircraft Type].[ALL].Boeing.[Boeing 777], 
    [Aircraft Type].[ALL].Boeing.[Boeing 787 Dreamliner]
} on columns
from [Airline Turnover];

---

with 
member measure.SSSSSS as 
    sum(Ytd(), measure.[sales amount]) 
select { (measure.[sales amount]), measure.SSSSSS} on 1, 
YTD() on 10 
from [Online Store] 
where (Calendar.[ALL].[2021].Q4.M12, [Payment Method].[ALL].[Credit Card]);

---

with 
set [SS[]]SSS]]]]S]
    as tail( crossjoin(LATERALMEMBERS([starting region].[ALL].[Europe]), LATERALMEMBERS(measure.income)), 8 ) 
SELECT 
[SS[]]SSS]]]]S] On 10, 
LATERALMEMBERS([completion date].[ALL]) On 1 
frOM [logistics.test] ;

---

with 
set [SSSSSS]]]]]]]] [] 
    as filter(descendants(Calendar.[ALL].[2021], 1, SELF_AND_AFTER), (measureWWWWWWWWWWWWWWWWWW.[sales amount]) > 1) 
member measure.XXXXXX 
    as (measuZZZZZZZZZZZZZZZZZZZre.[sales amount]) - 18000 
select 
    bottomPercent([SSSSSS]]]]]]]] [], 53, (measure.[XXXXXX])) on 10, 
    {(measure.[XXXXXX])} on 1 
from [Online Store] ;

---

with member [measure].[[p[ro[port]]io]]n]]] as [measure].Turnover / ([Service Type].[ALL], [measure].Turnover)
select
{Date.[ALL].[2020],Date.[ALL].[2021],Date.[ALL].[2022]} on 1,
members([Service Type], LEAF) on 0
from [Airline Turnover]
where ([measure].[[p[ro[port]]io]]n]]], [Aircraft Type].[ALL].[Airbus].[Airbus A380]);

---

with
member measure.[[################]] finished [################]]] as 660880
member measure.[##########################################] as 660880
select
{ (Calendar.[ALL]) } on 0,
{
    (measure.[##########################################]),
    (measure.[[################]] finished [################]]]),
    (measure.[##########################################])
} on SECTIons
from [Online Store];

---

with
member measure.[################ finished ################] as 660880
member measure.[##########################################] as 660880
select
{ (Calendar.[ALL]) } on 0,
{
    (measure.[##########################################]),
    (measure.[################ finished ################]),
    (measure.[##########################################])
} on SECTIons
from [Online Store];

---

Select
Region.members on columns,
Date.members on rows
from [Panda Store]
where ([Goods].[Foodstuff]);

---

Select
{Date.[2022].Q1,Date.[2022].Q2,Date.[2022].Q3,Date.[2022].Q4} on columns,
Goods.Foodstuff.children on rows
from [Panda Store]
where ([Region].[North America]);

---

Select
{Date.[2022].Q1,Date.[2022].Q2,Date.[2022].Q3,Date.[2022].Q4} on columns,
{[Measures].[Sales],[Measures].[Sales Count]} on rows
from [Panda Store]
where ([Region].[North America], Goods.Foodstuff);

---

Select
Region.[ALL].children on columns,
Goods.[ALL].children on rows
from [Panda Store]
where (Date.[2022].Q3);

---

Select
union(Goods.Foodstuff.Fruits, Goods.Foodstuff.Fruits.children) on columns,
[Measures].Sales on rows
from [Panda Store];

---

Select
union(Goods.Foodstuff, Goods.Foodstuff.children) on columns,
[Measures].Sales on rows
from [Panda Store];

---

with
member [Measures].DrinkRate as [Measures].Sales / (Goods.currentmember.parent, [Measures].Sales)
Select
Goods.Foodstuff.Drink.children on columns,
{[Measures]. DrinkRate, [Measures].Sales} on rows
from [Panda Store];

---

Select
Children(Date.[2022]) on columns,
[Measures].members on rows
from [Panda Store];

---

with member [Measures].otherCubeSales
as lookupcube("Dolphin Store", "[Measures].Sales")
select
Date.[2022] on rows,
{[Measures].Sales, [Measures].otherCubeSales} on columns
from [Panda Store];

---

Select
Date.[2022] on columns,
[Measures].Sales on rows
from [Panda Store];

---

select
dr2.t2 on columns,
dr1.ROOT on rows
from tinycube1;

---

select
[Measures].MeaA on columns,
[R1].[ALL] on rows
from [OC1M];

---

select
[Measures].MeaA on columns,
[R1].[o1] on rows
from [OC1M];

---

select
[Measures].MeaA on columns,
[R1].[o1].[o11] on rows
from [OC1M];

---

select
[Measures].members on columns,
R1.members on rows
from OC1M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111, R6.o1.o11.o111);

---

select
[Measures].MeaA on columns,
R1.o1.o11.o111 on rows
from OC1M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111, R6.o1.o11.o111);

---

select
[Measures].MeaA on columns,
{R1.[ALL], R1.o1, R1.o2} on rows
from OC1M
where (R2.o1, R3.o1, R4.o1, R5.o1, R6.o1)

---

select
[Measures].MeaA on columns,
{R1.[ALL], R1.o1, R1.o2} on rows
from OC1M

---

select
[Measures].MeaA on columns,
R1.o2 on rows
from OC1M
where (R3.o1, R5.o1, R6.o1)

---

select
[Measures].MeaA on columns,
R1.o1 on rows
from OC1M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111, R6.o1.o11.o111);

---

select
{[Measures].MeaA, [Measures].MeaB, [Measures].MeaC} on columns,
[R1].[o1] on rows
from [OC1M];

---

select
[Measures].MeaA on columns,
R1.o1 on rows
from OC1M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111);

---

select
{[Measures].MeaA, [Measures].MeaB, [Measures].MeaC, [Measures].MeaD} on columns,
R1.ROOT on rows
from OC100M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111, R6.o1.o11.o111, R7.o1.o11.o111);

---

select
{[Measures].MeaA, [Measures].MeaB, [Measures].MeaC, [Measures].MeaD} on columns,
R1.ROOT on rows
from OC100M
where (R2.o1.o11.o111, R3.o1.o11.o111, R4.o1.o11.o111, R5.o1.o11.o111);

---

select
{[Measures].MeaA, [Measures].MeaB, [Measures].MeaC, [Measures].MeaD} on columns,
R1.ROOT on rows
from OC100M
where (R2.o1, R3.o1, R4.o1, R5.o1);

---

select
{[Measures].MeaA, [Measures].MeaB, [Measures].MeaC, [Measures].MeaD} on columns,
R1.ROOT on rows
from OC100M
where (R4.o1, R5.o1);

---

with member [Measures].XXX as (dr2.t2, [Measures].MeaA)
select
{[Measures].XXX, [Measures].MeaA} on 0,
dr1.root on 1
from [tinycube1];

---

with member [Measures].XXX as dr2.t2
select
[Measures].XXX on 0,
dr1.root on 1
from [tinycube1];

---

select
[Measures].Sales on 0,
Date.[2022].Q3 on 1
from [Nile Online Store];

---

select
[Measures].Sales on 0,
Date.[ALL] on 1
from [Nile Online Store];
